// Template adopted from https://github.com/paritytech/substrate/blob/master/.maintain/frame-weight-template.hbs

//! Autogenerated weights for pallet_fungible
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-08-15, STEPS: `50`, REPEAT: 80, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/unique-collator
// benchmark
// pallet
// --pallet
// pallet-fungible
// --wasm-execution
// compiled
// --extrinsic
// *
// --template
// .maintain/frame-weight-template.hbs
// --steps=50
// --repeat=80
// --heap-pages=4096
// --output=./pallets/fungible/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_fungible.
pub trait WeightInfo {
	fn create_item() -> Weight;
	fn create_multiple_items_ex(b: u32, ) -> Weight;
	fn burn_item() -> Weight;
	fn transfer() -> Weight;
	fn approve() -> Weight;
	fn transfer_from() -> Weight;
	fn burn_from() -> Weight;
}

/// Weights for pallet_fungible using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Fungible TotalSupply (r:1 w:1)
	// Storage: Fungible Balance (r:1 w:1)
	fn create_item() -> Weight {
		Weight::from_ref_time(18_195_000)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Fungible TotalSupply (r:1 w:1)
	// Storage: Fungible Balance (r:4 w:4)
	fn create_multiple_items_ex(b: u32, ) -> Weight {
		Weight::from_ref_time(19_218_000)
			// Standard Error: 3_000
			.saturating_add(Weight::from_ref_time(4_516_000).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(b as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(b as u64)))
	}
	// Storage: Fungible TotalSupply (r:1 w:1)
	// Storage: Fungible Balance (r:1 w:1)
	fn burn_item() -> Weight {
		Weight::from_ref_time(18_719_000)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Fungible Balance (r:2 w:2)
	fn transfer() -> Weight {
		Weight::from_ref_time(20_563_000)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Fungible Balance (r:1 w:0)
	// Storage: Fungible Allowance (r:0 w:1)
	fn approve() -> Weight {
		Weight::from_ref_time(17_583_000)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Fungible Allowance (r:1 w:1)
	// Storage: Fungible Balance (r:2 w:2)
	fn transfer_from() -> Weight {
		Weight::from_ref_time(29_845_000)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Fungible Allowance (r:1 w:1)
	// Storage: Fungible TotalSupply (r:1 w:1)
	// Storage: Fungible Balance (r:1 w:1)
	fn burn_from() -> Weight {
		Weight::from_ref_time(28_248_000)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Fungible TotalSupply (r:1 w:1)
	// Storage: Fungible Balance (r:1 w:1)
	fn create_item() -> Weight {
		Weight::from_ref_time(18_195_000)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: Fungible TotalSupply (r:1 w:1)
	// Storage: Fungible Balance (r:4 w:4)
	fn create_multiple_items_ex(b: u32, ) -> Weight {
		Weight::from_ref_time(19_218_000)
			// Standard Error: 3_000
			.saturating_add(Weight::from_ref_time(4_516_000).saturating_mul(b as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(b as u64)))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(b as u64)))
	}
	// Storage: Fungible TotalSupply (r:1 w:1)
	// Storage: Fungible Balance (r:1 w:1)
	fn burn_item() -> Weight {
		Weight::from_ref_time(18_719_000)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: Fungible Balance (r:2 w:2)
	fn transfer() -> Weight {
		Weight::from_ref_time(20_563_000)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: Fungible Balance (r:1 w:0)
	// Storage: Fungible Allowance (r:0 w:1)
	fn approve() -> Weight {
		Weight::from_ref_time(17_583_000)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Fungible Allowance (r:1 w:1)
	// Storage: Fungible Balance (r:2 w:2)
	fn transfer_from() -> Weight {
		Weight::from_ref_time(29_845_000)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Fungible Allowance (r:1 w:1)
	// Storage: Fungible TotalSupply (r:1 w:1)
	// Storage: Fungible Balance (r:1 w:1)
	fn burn_from() -> Weight {
		Weight::from_ref_time(28_248_000)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
}
