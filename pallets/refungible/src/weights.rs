// Template adopted from https://github.com/paritytech/substrate/blob/master/.maintain/frame-weight-template.hbs

//! Autogenerated weights for pallet_refungible
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.0.0
//! DATE: 2025-03-20, STEPS: `50`, REPEAT: `80`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bench-host`, CPU: `Intel(R) Core(TM) i7-8700 CPU @ 3.20GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/production/unique-collator
// benchmark
// pallet
// --pallet
// pallet-refungible
// --wasm-execution
// compiled
// --extrinsic
// *
// --template=.maintain/frame-weight-template.hbs
// --steps=50
// --repeat=80
// --heap-pages=4096
// --output=./pallets/refungible/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_refungible.
pub trait WeightInfo {
	fn create_item() -> Weight;
	fn create_multiple_items(b: u32, ) -> Weight;
	fn create_multiple_items_ex_multiple_items(b: u32, ) -> Weight;
	fn create_multiple_items_ex_multiple_owners(b: u32, ) -> Weight;
	fn burn_item_partial() -> Weight;
	fn burn_item_fully() -> Weight;
	fn transfer_normal() -> Weight;
	fn transfer_creating() -> Weight;
	fn transfer_removing() -> Weight;
	fn transfer_creating_removing() -> Weight;
	fn approve() -> Weight;
	fn approve_from() -> Weight;
	fn transfer_from_normal() -> Weight;
	fn transfer_from_creating() -> Weight;
	fn transfer_from_removing() -> Weight;
	fn transfer_from_creating_removing() -> Weight;
	fn burn_from() -> Weight;
	fn load_token_properties() -> Weight;
	fn write_token_properties(b: u32, ) -> Weight;
	fn set_token_property_permissions(b: u32, ) -> Weight;
	fn repartition_item() -> Weight;
	fn set_allowance_for_all() -> Weight;
	fn allowance_for_all() -> Weight;
	fn repair_item() -> Weight;
}

/// Weights for pallet_refungible using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Refungible::TokensMinted` (r:1 w:1)
	/// Proof: `Refungible::TokensMinted` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:1 w:1)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Balance` (r:0 w:1)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:0 w:1)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:1)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	fn create_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3530`
		// Minimum execution time: 29_748_000 picoseconds.
		Weight::from_parts(30_217_000, 3530)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Refungible::TokensMinted` (r:1 w:1)
	/// Proof: `Refungible::TokensMinted` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:1 w:1)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Balance` (r:0 w:120)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:0 w:120)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:120)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[0, 120]`.
	fn create_multiple_items(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3530`
		// Minimum execution time: 6_719_000 picoseconds.
		Weight::from_parts(13_775_926, 3530)
			// Standard Error: 4_559
			.saturating_add(Weight::from_parts(11_760_425, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(b.into())))
	}
	/// Storage: `Refungible::TokensMinted` (r:1 w:1)
	/// Proof: `Refungible::TokensMinted` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:120 w:120)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Balance` (r:0 w:120)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:0 w:120)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:120)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[0, 120]`.
	fn create_multiple_items_ex_multiple_items(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3481 + b * (2540 ±0)`
		// Minimum execution time: 6_680_000 picoseconds.
		Weight::from_parts(7_358_658, 3481)
			// Standard Error: 5_906
			.saturating_add(Weight::from_parts(16_216_093, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: `Refungible::TokensMinted` (r:1 w:1)
	/// Proof: `Refungible::TokensMinted` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:120 w:120)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Balance` (r:0 w:120)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:0 w:1)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:120)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[0, 120]`.
	fn create_multiple_items_ex_multiple_owners(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3481 + b * (2540 ±0)`
		// Minimum execution time: 9_973_000 picoseconds.
		Weight::from_parts(14_383_172, 3481)
			// Standard Error: 5_034
			.saturating_add(Weight::from_parts(12_661_231, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: `Refungible::Balance` (r:3 w:1)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:1)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:1 w:1)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:1)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	fn burn_item_partial() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `456`
		//  Estimated: `8682`
		// Minimum execution time: 48_485_000 picoseconds.
		Weight::from_parts(49_089_000, 8682)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Refungible::Balance` (r:1 w:1)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:1)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:1 w:1)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TokensBurnt` (r:1 w:1)
	/// Proof: `Refungible::TokensBurnt` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:1)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TokenProperties` (r:0 w:1)
	/// Proof: `Refungible::TokenProperties` (`max_values`: None, `max_size`: Some(32804), added: 35279, mode: `MaxEncodedLen`)
	fn burn_item_fully() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341`
		//  Estimated: `3554`
		// Minimum execution time: 48_479_000 picoseconds.
		Weight::from_parts(49_183_000, 3554)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Refungible::Balance` (r:2 w:2)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:0)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	fn transfer_normal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `365`
		//  Estimated: `6118`
		// Minimum execution time: 30_410_000 picoseconds.
		Weight::from_parts(31_090_000, 6118)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Refungible::Balance` (r:2 w:2)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:1 w:1)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:0)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:1)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	fn transfer_creating() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341`
		//  Estimated: `6118`
		// Minimum execution time: 38_831_000 picoseconds.
		Weight::from_parts(39_292_000, 6118)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Refungible::Balance` (r:2 w:2)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:1 w:1)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:0)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:1)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	fn transfer_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `456`
		//  Estimated: `6118`
		// Minimum execution time: 42_092_000 picoseconds.
		Weight::from_parts(42_704_000, 6118)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Refungible::Balance` (r:2 w:2)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:2 w:2)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:0)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:2)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	fn transfer_creating_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341`
		//  Estimated: `6118`
		// Minimum execution time: 47_503_000 picoseconds.
		Weight::from_parts(48_007_000, 6118)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Refungible::Balance` (r:1 w:0)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Allowance` (r:0 w:1)
	/// Proof: `Refungible::Allowance` (`max_values`: None, `max_size`: Some(105), added: 2580, mode: `MaxEncodedLen`)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `223`
		//  Estimated: `3554`
		// Minimum execution time: 18_400_000 picoseconds.
		Weight::from_parts(18_765_000, 3554)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Refungible::Balance` (r:1 w:0)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Allowance` (r:0 w:1)
	/// Proof: `Refungible::Allowance` (`max_values`: None, `max_size`: Some(105), added: 2580, mode: `MaxEncodedLen`)
	fn approve_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `211`
		//  Estimated: `3554`
		// Minimum execution time: 19_062_000 picoseconds.
		Weight::from_parts(19_334_000, 3554)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Refungible::Allowance` (r:1 w:1)
	/// Proof: `Refungible::Allowance` (`max_values`: None, `max_size`: Some(105), added: 2580, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Balance` (r:2 w:2)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:0)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	fn transfer_from_normal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `495`
		//  Estimated: `6118`
		// Minimum execution time: 44_555_000 picoseconds.
		Weight::from_parts(45_242_000, 6118)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Refungible::Allowance` (r:1 w:1)
	/// Proof: `Refungible::Allowance` (`max_values`: None, `max_size`: Some(105), added: 2580, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Balance` (r:2 w:2)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:1 w:1)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:0)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:1)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	fn transfer_from_creating() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `471`
		//  Estimated: `6118`
		// Minimum execution time: 53_396_000 picoseconds.
		Weight::from_parts(54_297_000, 6118)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Refungible::Allowance` (r:1 w:1)
	/// Proof: `Refungible::Allowance` (`max_values`: None, `max_size`: Some(105), added: 2580, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Balance` (r:2 w:2)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:1 w:1)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:0)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:1)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	fn transfer_from_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `586`
		//  Estimated: `6118`
		// Minimum execution time: 57_216_000 picoseconds.
		Weight::from_parts(57_789_000, 6118)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Refungible::Allowance` (r:1 w:1)
	/// Proof: `Refungible::Allowance` (`max_values`: None, `max_size`: Some(105), added: 2580, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Balance` (r:2 w:2)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:2 w:2)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:0)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:2)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	fn transfer_from_creating_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `471`
		//  Estimated: `6118`
		// Minimum execution time: 60_978_000 picoseconds.
		Weight::from_parts(61_616_000, 6118)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `Refungible::Allowance` (r:1 w:1)
	/// Proof: `Refungible::Allowance` (`max_values`: None, `max_size`: Some(105), added: 2580, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Balance` (r:1 w:1)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:1)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:1 w:1)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TokensBurnt` (r:1 w:1)
	/// Proof: `Refungible::TokensBurnt` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:1)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TokenProperties` (r:0 w:1)
	/// Proof: `Refungible::TokenProperties` (`max_values`: None, `max_size`: Some(32804), added: 35279, mode: `MaxEncodedLen`)
	fn burn_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `471`
		//  Estimated: `3570`
		// Minimum execution time: 63_998_000 picoseconds.
		Weight::from_parts(64_728_000, 3570)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `Refungible::TokenProperties` (r:1 w:0)
	/// Proof: `Refungible::TokenProperties` (`max_values`: None, `max_size`: Some(32804), added: 35279, mode: `MaxEncodedLen`)
	fn load_token_properties() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `120`
		//  Estimated: `36269`
		// Minimum execution time: 4_840_000 picoseconds.
		Weight::from_parts(4_994_000, 36269)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Refungible::TokenProperties` (r:0 w:1)
	/// Proof: `Refungible::TokenProperties` (`max_values`: None, `max_size`: Some(32804), added: 35279, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[0, 64]`.
	fn write_token_properties(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 705_000 picoseconds.
		Weight::from_parts(732_000, 0)
			// Standard Error: 33_958
			.saturating_add(Weight::from_parts(40_084_263, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Common::CollectionPropertyPermissions` (r:1 w:1)
	/// Proof: `Common::CollectionPropertyPermissions` (`max_values`: None, `max_size`: Some(16726), added: 19201, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[0, 64]`.
	fn set_token_property_permissions(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `314`
		//  Estimated: `20191`
		// Minimum execution time: 3_274_000 picoseconds.
		Weight::from_parts(3_481_000, 20191)
			// Standard Error: 171_019
			.saturating_add(Weight::from_parts(36_900_370, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Refungible::TotalSupply` (r:1 w:1)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Balance` (r:1 w:1)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	fn repartition_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `288`
		//  Estimated: `3554`
		// Minimum execution time: 23_124_000 picoseconds.
		Weight::from_parts(23_477_000, 3554)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Refungible::CollectionAllowance` (r:0 w:1)
	/// Proof: `Refungible::CollectionAllowance` (`max_values`: None, `max_size`: Some(111), added: 2586, mode: `MaxEncodedLen`)
	fn set_allowance_for_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_760_000 picoseconds.
		Weight::from_parts(9_983_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Refungible::CollectionAllowance` (r:1 w:0)
	/// Proof: `Refungible::CollectionAllowance` (`max_values`: None, `max_size`: Some(111), added: 2586, mode: `MaxEncodedLen`)
	fn allowance_for_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3576`
		// Minimum execution time: 5_598_000 picoseconds.
		Weight::from_parts(5_774_000, 3576)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Refungible::TokenProperties` (r:1 w:1)
	/// Proof: `Refungible::TokenProperties` (`max_values`: None, `max_size`: Some(32804), added: 35279, mode: `MaxEncodedLen`)
	fn repair_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `120`
		//  Estimated: `36269`
		// Minimum execution time: 5_021_000 picoseconds.
		Weight::from_parts(5_223_000, 36269)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Refungible::TokensMinted` (r:1 w:1)
	/// Proof: `Refungible::TokensMinted` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:1 w:1)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Balance` (r:0 w:1)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:0 w:1)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:1)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	fn create_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3530`
		// Minimum execution time: 29_748_000 picoseconds.
		Weight::from_parts(30_217_000, 3530)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Refungible::TokensMinted` (r:1 w:1)
	/// Proof: `Refungible::TokensMinted` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:1 w:1)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Balance` (r:0 w:120)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:0 w:120)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:120)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[0, 120]`.
	fn create_multiple_items(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3530`
		// Minimum execution time: 6_719_000 picoseconds.
		Weight::from_parts(13_775_926, 3530)
			// Standard Error: 4_559
			.saturating_add(Weight::from_parts(11_760_425, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(b.into())))
	}
	/// Storage: `Refungible::TokensMinted` (r:1 w:1)
	/// Proof: `Refungible::TokensMinted` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:120 w:120)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Balance` (r:0 w:120)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:0 w:120)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:120)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[0, 120]`.
	fn create_multiple_items_ex_multiple_items(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3481 + b * (2540 ±0)`
		// Minimum execution time: 6_680_000 picoseconds.
		Weight::from_parts(7_358_658, 3481)
			// Standard Error: 5_906
			.saturating_add(Weight::from_parts(16_216_093, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((4_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: `Refungible::TokensMinted` (r:1 w:1)
	/// Proof: `Refungible::TokensMinted` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:120 w:120)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Balance` (r:0 w:120)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:0 w:1)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:120)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[0, 120]`.
	fn create_multiple_items_ex_multiple_owners(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3481 + b * (2540 ±0)`
		// Minimum execution time: 9_973_000 picoseconds.
		Weight::from_parts(14_383_172, 3481)
			// Standard Error: 5_034
			.saturating_add(Weight::from_parts(12_661_231, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: `Refungible::Balance` (r:3 w:1)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:1)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:1 w:1)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:1)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	fn burn_item_partial() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `456`
		//  Estimated: `8682`
		// Minimum execution time: 48_485_000 picoseconds.
		Weight::from_parts(49_089_000, 8682)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Refungible::Balance` (r:1 w:1)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:1)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:1 w:1)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TokensBurnt` (r:1 w:1)
	/// Proof: `Refungible::TokensBurnt` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:1)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TokenProperties` (r:0 w:1)
	/// Proof: `Refungible::TokenProperties` (`max_values`: None, `max_size`: Some(32804), added: 35279, mode: `MaxEncodedLen`)
	fn burn_item_fully() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341`
		//  Estimated: `3554`
		// Minimum execution time: 48_479_000 picoseconds.
		Weight::from_parts(49_183_000, 3554)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Refungible::Balance` (r:2 w:2)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:0)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	fn transfer_normal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `365`
		//  Estimated: `6118`
		// Minimum execution time: 30_410_000 picoseconds.
		Weight::from_parts(31_090_000, 6118)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Refungible::Balance` (r:2 w:2)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:1 w:1)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:0)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:1)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	fn transfer_creating() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341`
		//  Estimated: `6118`
		// Minimum execution time: 38_831_000 picoseconds.
		Weight::from_parts(39_292_000, 6118)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Refungible::Balance` (r:2 w:2)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:1 w:1)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:0)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:1)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	fn transfer_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `456`
		//  Estimated: `6118`
		// Minimum execution time: 42_092_000 picoseconds.
		Weight::from_parts(42_704_000, 6118)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Refungible::Balance` (r:2 w:2)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:2 w:2)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:0)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:2)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	fn transfer_creating_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341`
		//  Estimated: `6118`
		// Minimum execution time: 47_503_000 picoseconds.
		Weight::from_parts(48_007_000, 6118)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Refungible::Balance` (r:1 w:0)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Allowance` (r:0 w:1)
	/// Proof: `Refungible::Allowance` (`max_values`: None, `max_size`: Some(105), added: 2580, mode: `MaxEncodedLen`)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `223`
		//  Estimated: `3554`
		// Minimum execution time: 18_400_000 picoseconds.
		Weight::from_parts(18_765_000, 3554)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Refungible::Balance` (r:1 w:0)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Allowance` (r:0 w:1)
	/// Proof: `Refungible::Allowance` (`max_values`: None, `max_size`: Some(105), added: 2580, mode: `MaxEncodedLen`)
	fn approve_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `211`
		//  Estimated: `3554`
		// Minimum execution time: 19_062_000 picoseconds.
		Weight::from_parts(19_334_000, 3554)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Refungible::Allowance` (r:1 w:1)
	/// Proof: `Refungible::Allowance` (`max_values`: None, `max_size`: Some(105), added: 2580, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Balance` (r:2 w:2)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:0)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	fn transfer_from_normal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `495`
		//  Estimated: `6118`
		// Minimum execution time: 44_555_000 picoseconds.
		Weight::from_parts(45_242_000, 6118)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Refungible::Allowance` (r:1 w:1)
	/// Proof: `Refungible::Allowance` (`max_values`: None, `max_size`: Some(105), added: 2580, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Balance` (r:2 w:2)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:1 w:1)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:0)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:1)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	fn transfer_from_creating() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `471`
		//  Estimated: `6118`
		// Minimum execution time: 53_396_000 picoseconds.
		Weight::from_parts(54_297_000, 6118)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Refungible::Allowance` (r:1 w:1)
	/// Proof: `Refungible::Allowance` (`max_values`: None, `max_size`: Some(105), added: 2580, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Balance` (r:2 w:2)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:1 w:1)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:0)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:1)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	fn transfer_from_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `586`
		//  Estimated: `6118`
		// Minimum execution time: 57_216_000 picoseconds.
		Weight::from_parts(57_789_000, 6118)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Refungible::Allowance` (r:1 w:1)
	/// Proof: `Refungible::Allowance` (`max_values`: None, `max_size`: Some(105), added: 2580, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Balance` (r:2 w:2)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:2 w:2)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:0)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:2)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	fn transfer_from_creating_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `471`
		//  Estimated: `6118`
		// Minimum execution time: 60_978_000 picoseconds.
		Weight::from_parts(61_616_000, 6118)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `Refungible::Allowance` (r:1 w:1)
	/// Proof: `Refungible::Allowance` (`max_values`: None, `max_size`: Some(105), added: 2580, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Balance` (r:1 w:1)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TotalSupply` (r:1 w:1)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::AccountBalance` (r:1 w:1)
	/// Proof: `Refungible::AccountBalance` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TokensBurnt` (r:1 w:1)
	/// Proof: `Refungible::TokensBurnt` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Owned` (r:0 w:1)
	/// Proof: `Refungible::Owned` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::TokenProperties` (r:0 w:1)
	/// Proof: `Refungible::TokenProperties` (`max_values`: None, `max_size`: Some(32804), added: 35279, mode: `MaxEncodedLen`)
	fn burn_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `471`
		//  Estimated: `3570`
		// Minimum execution time: 63_998_000 picoseconds.
		Weight::from_parts(64_728_000, 3570)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `Refungible::TokenProperties` (r:1 w:0)
	/// Proof: `Refungible::TokenProperties` (`max_values`: None, `max_size`: Some(32804), added: 35279, mode: `MaxEncodedLen`)
	fn load_token_properties() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `120`
		//  Estimated: `36269`
		// Minimum execution time: 4_840_000 picoseconds.
		Weight::from_parts(4_994_000, 36269)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Refungible::TokenProperties` (r:0 w:1)
	/// Proof: `Refungible::TokenProperties` (`max_values`: None, `max_size`: Some(32804), added: 35279, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[0, 64]`.
	fn write_token_properties(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 705_000 picoseconds.
		Weight::from_parts(732_000, 0)
			// Standard Error: 33_958
			.saturating_add(Weight::from_parts(40_084_263, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Common::CollectionPropertyPermissions` (r:1 w:1)
	/// Proof: `Common::CollectionPropertyPermissions` (`max_values`: None, `max_size`: Some(16726), added: 19201, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[0, 64]`.
	fn set_token_property_permissions(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `314`
		//  Estimated: `20191`
		// Minimum execution time: 3_274_000 picoseconds.
		Weight::from_parts(3_481_000, 20191)
			// Standard Error: 171_019
			.saturating_add(Weight::from_parts(36_900_370, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Refungible::TotalSupply` (r:1 w:1)
	/// Proof: `Refungible::TotalSupply` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Refungible::Balance` (r:1 w:1)
	/// Proof: `Refungible::Balance` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	fn repartition_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `288`
		//  Estimated: `3554`
		// Minimum execution time: 23_124_000 picoseconds.
		Weight::from_parts(23_477_000, 3554)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Refungible::CollectionAllowance` (r:0 w:1)
	/// Proof: `Refungible::CollectionAllowance` (`max_values`: None, `max_size`: Some(111), added: 2586, mode: `MaxEncodedLen`)
	fn set_allowance_for_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_760_000 picoseconds.
		Weight::from_parts(9_983_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Refungible::CollectionAllowance` (r:1 w:0)
	/// Proof: `Refungible::CollectionAllowance` (`max_values`: None, `max_size`: Some(111), added: 2586, mode: `MaxEncodedLen`)
	fn allowance_for_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3576`
		// Minimum execution time: 5_598_000 picoseconds.
		Weight::from_parts(5_774_000, 3576)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Refungible::TokenProperties` (r:1 w:1)
	/// Proof: `Refungible::TokenProperties` (`max_values`: None, `max_size`: Some(32804), added: 35279, mode: `MaxEncodedLen`)
	fn repair_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `120`
		//  Estimated: `36269`
		// Minimum execution time: 5_021_000 picoseconds.
		Weight::from_parts(5_223_000, 36269)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

