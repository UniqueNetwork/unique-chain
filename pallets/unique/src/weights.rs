// Template adopted from https://github.com/paritytech/substrate/blob/master/.maintain/frame-weight-template.hbs

//! Autogenerated weights for pallet_unique
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-13, STEPS: `50`, REPEAT: `80`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bench-host`, CPU: `Intel(R) Core(TM) i7-8700 CPU @ 3.20GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/production/unique-collator
// benchmark
// pallet
// --pallet
// pallet-unique
// --wasm-execution
// compiled
// --extrinsic
// *
// --template=.maintain/frame-weight-template.hbs
// --steps=50
// --repeat=80
// --heap-pages=4096
// --output=./pallets/unique/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_unique.
pub trait WeightInfo {
	fn create_collection() -> Weight;
	fn destroy_collection() -> Weight;
	fn add_to_allow_list() -> Weight;
	fn remove_from_allow_list() -> Weight;
	fn change_collection_owner() -> Weight;
	fn add_collection_admin() -> Weight;
	fn remove_collection_admin() -> Weight;
	fn set_collection_sponsor() -> Weight;
	fn confirm_sponsorship() -> Weight;
	fn remove_collection_sponsor() -> Weight;
	fn set_transfers_enabled_flag() -> Weight;
	fn set_collection_limits() -> Weight;
	fn force_repair_collection() -> Weight;
}

/// Weights for pallet_unique using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Common::CreatedCollectionCount` (r:1 w:1)
	/// Proof: `Common::CreatedCollectionCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Common::DestroyedCollectionCount` (r:1 w:0)
	/// Proof: `Common::DestroyedCollectionCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Common::AdminAmount` (r:0 w:1)
	/// Proof: `Common::AdminAmount` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Common::CollectionPropertyPermissions` (r:0 w:1)
	/// Proof: `Common::CollectionPropertyPermissions` (`max_values`: None, `max_size`: Some(16726), added: 19201, mode: `MaxEncodedLen`)
	/// Storage: `Common::CollectionProperties` (r:0 w:1)
	/// Proof: `Common::CollectionProperties` (`max_values`: None, `max_size`: Some(40992), added: 43467, mode: `MaxEncodedLen`)
	/// Storage: `Common::CollectionById` (r:0 w:1)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	fn create_collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `245`
		//  Estimated: `6196`
		// Minimum execution time: 59_642_000 picoseconds.
		Weight::from_parts(60_286_000, 6196)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:1)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	/// Storage: `Nonfungible::TokenData` (r:1 w:0)
	/// Proof: `Nonfungible::TokenData` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
	/// Storage: `Common::DestroyedCollectionCount` (r:1 w:1)
	/// Proof: `Common::DestroyedCollectionCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Nonfungible::TokensMinted` (r:0 w:1)
	/// Proof: `Nonfungible::TokensMinted` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// Storage: `Nonfungible::TokensBurnt` (r:0 w:1)
	/// Proof: `Nonfungible::TokensBurnt` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// Storage: `Common::AdminAmount` (r:0 w:1)
	/// Proof: `Common::AdminAmount` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Common::CollectionProperties` (r:0 w:1)
	/// Proof: `Common::CollectionProperties` (`max_values`: None, `max_size`: Some(40992), added: 43467, mode: `MaxEncodedLen`)
	fn destroy_collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1200`
		//  Estimated: `4325`
		// Minimum execution time: 63_083_000 picoseconds.
		Weight::from_parts(63_928_000, 4325)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:0)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	/// Storage: `Common::Allowlist` (r:0 w:1)
	/// Proof: `Common::Allowlist` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	fn add_to_allow_list() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1000`
		//  Estimated: `4325`
		// Minimum execution time: 18_654_000 picoseconds.
		Weight::from_parts(18_932_000, 4325)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:0)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	/// Storage: `Common::Allowlist` (r:0 w:1)
	/// Proof: `Common::Allowlist` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	fn remove_from_allow_list() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1033`
		//  Estimated: `4325`
		// Minimum execution time: 18_361_000 picoseconds.
		Weight::from_parts(18_584_000, 4325)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:1)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	fn change_collection_owner() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1000`
		//  Estimated: `4325`
		// Minimum execution time: 17_058_000 picoseconds.
		Weight::from_parts(17_362_000, 4325)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:0)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	/// Storage: `Common::IsAdmin` (r:1 w:1)
	/// Proof: `Common::IsAdmin` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	/// Storage: `Common::AdminAmount` (r:1 w:1)
	/// Proof: `Common::AdminAmount` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	fn add_collection_admin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1012`
		//  Estimated: `4325`
		// Minimum execution time: 24_063_000 picoseconds.
		Weight::from_parts(24_374_000, 4325)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:0)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	/// Storage: `Common::IsAdmin` (r:1 w:1)
	/// Proof: `Common::IsAdmin` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	/// Storage: `Common::AdminAmount` (r:1 w:1)
	/// Proof: `Common::AdminAmount` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	fn remove_collection_admin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1107`
		//  Estimated: `4325`
		// Minimum execution time: 25_196_000 picoseconds.
		Weight::from_parts(25_670_000, 4325)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:1)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	fn set_collection_sponsor() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1000`
		//  Estimated: `4325`
		// Minimum execution time: 17_058_000 picoseconds.
		Weight::from_parts(17_388_000, 4325)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:1)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	fn confirm_sponsorship() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1032`
		//  Estimated: `4325`
		// Minimum execution time: 16_730_000 picoseconds.
		Weight::from_parts(16_965_000, 4325)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:1)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	fn remove_collection_sponsor() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1032`
		//  Estimated: `4325`
		// Minimum execution time: 16_504_000 picoseconds.
		Weight::from_parts(16_836_000, 4325)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:1)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	fn set_transfers_enabled_flag() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1000`
		//  Estimated: `4325`
		// Minimum execution time: 10_285_000 picoseconds.
		Weight::from_parts(10_505_000, 4325)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:1)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	fn set_collection_limits() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1000`
		//  Estimated: `4325`
		// Minimum execution time: 17_160_000 picoseconds.
		Weight::from_parts(17_427_000, 4325)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Common::CollectionProperties` (r:1 w:1)
	/// Proof: `Common::CollectionProperties` (`max_values`: None, `max_size`: Some(40992), added: 43467, mode: `MaxEncodedLen`)
	fn force_repair_collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `298`
		//  Estimated: `44457`
		// Minimum execution time: 7_771_000 picoseconds.
		Weight::from_parts(8_037_000, 44457)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Common::CreatedCollectionCount` (r:1 w:1)
	/// Proof: `Common::CreatedCollectionCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Common::DestroyedCollectionCount` (r:1 w:0)
	/// Proof: `Common::DestroyedCollectionCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Common::AdminAmount` (r:0 w:1)
	/// Proof: `Common::AdminAmount` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Common::CollectionPropertyPermissions` (r:0 w:1)
	/// Proof: `Common::CollectionPropertyPermissions` (`max_values`: None, `max_size`: Some(16726), added: 19201, mode: `MaxEncodedLen`)
	/// Storage: `Common::CollectionProperties` (r:0 w:1)
	/// Proof: `Common::CollectionProperties` (`max_values`: None, `max_size`: Some(40992), added: 43467, mode: `MaxEncodedLen`)
	/// Storage: `Common::CollectionById` (r:0 w:1)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	fn create_collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `245`
		//  Estimated: `6196`
		// Minimum execution time: 59_642_000 picoseconds.
		Weight::from_parts(60_286_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:1)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	/// Storage: `Nonfungible::TokenData` (r:1 w:0)
	/// Proof: `Nonfungible::TokenData` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
	/// Storage: `Common::DestroyedCollectionCount` (r:1 w:1)
	/// Proof: `Common::DestroyedCollectionCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Nonfungible::TokensMinted` (r:0 w:1)
	/// Proof: `Nonfungible::TokensMinted` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// Storage: `Nonfungible::TokensBurnt` (r:0 w:1)
	/// Proof: `Nonfungible::TokensBurnt` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// Storage: `Common::AdminAmount` (r:0 w:1)
	/// Proof: `Common::AdminAmount` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Common::CollectionProperties` (r:0 w:1)
	/// Proof: `Common::CollectionProperties` (`max_values`: None, `max_size`: Some(40992), added: 43467, mode: `MaxEncodedLen`)
	fn destroy_collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1200`
		//  Estimated: `4325`
		// Minimum execution time: 63_083_000 picoseconds.
		Weight::from_parts(63_928_000, 4325)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:0)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	/// Storage: `Common::Allowlist` (r:0 w:1)
	/// Proof: `Common::Allowlist` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	fn add_to_allow_list() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1000`
		//  Estimated: `4325`
		// Minimum execution time: 18_654_000 picoseconds.
		Weight::from_parts(18_932_000, 4325)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:0)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	/// Storage: `Common::Allowlist` (r:0 w:1)
	/// Proof: `Common::Allowlist` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	fn remove_from_allow_list() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1033`
		//  Estimated: `4325`
		// Minimum execution time: 18_361_000 picoseconds.
		Weight::from_parts(18_584_000, 4325)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:1)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	fn change_collection_owner() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1000`
		//  Estimated: `4325`
		// Minimum execution time: 17_058_000 picoseconds.
		Weight::from_parts(17_362_000, 4325)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:0)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	/// Storage: `Common::IsAdmin` (r:1 w:1)
	/// Proof: `Common::IsAdmin` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	/// Storage: `Common::AdminAmount` (r:1 w:1)
	/// Proof: `Common::AdminAmount` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	fn add_collection_admin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1012`
		//  Estimated: `4325`
		// Minimum execution time: 24_063_000 picoseconds.
		Weight::from_parts(24_374_000, 4325)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:0)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	/// Storage: `Common::IsAdmin` (r:1 w:1)
	/// Proof: `Common::IsAdmin` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	/// Storage: `Common::AdminAmount` (r:1 w:1)
	/// Proof: `Common::AdminAmount` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	fn remove_collection_admin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1107`
		//  Estimated: `4325`
		// Minimum execution time: 25_196_000 picoseconds.
		Weight::from_parts(25_670_000, 4325)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:1)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	fn set_collection_sponsor() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1000`
		//  Estimated: `4325`
		// Minimum execution time: 17_058_000 picoseconds.
		Weight::from_parts(17_388_000, 4325)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:1)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	fn confirm_sponsorship() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1032`
		//  Estimated: `4325`
		// Minimum execution time: 16_730_000 picoseconds.
		Weight::from_parts(16_965_000, 4325)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:1)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	fn remove_collection_sponsor() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1032`
		//  Estimated: `4325`
		// Minimum execution time: 16_504_000 picoseconds.
		Weight::from_parts(16_836_000, 4325)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:1)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	fn set_transfers_enabled_flag() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1000`
		//  Estimated: `4325`
		// Minimum execution time: 10_285_000 picoseconds.
		Weight::from_parts(10_505_000, 4325)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Common::CollectionById` (r:1 w:1)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	fn set_collection_limits() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1000`
		//  Estimated: `4325`
		// Minimum execution time: 17_160_000 picoseconds.
		Weight::from_parts(17_427_000, 4325)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Common::CollectionProperties` (r:1 w:1)
	/// Proof: `Common::CollectionProperties` (`max_values`: None, `max_size`: Some(40992), added: 43467, mode: `MaxEncodedLen`)
	fn force_repair_collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `298`
		//  Estimated: `44457`
		// Minimum execution time: 7_771_000 picoseconds.
		Weight::from_parts(8_037_000, 44457)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

