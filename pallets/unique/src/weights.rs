// Template adopted from https://github.com/paritytech/substrate/blob/master/.maintain/frame-weight-template.hbs

//! Autogenerated weights for pallet_unique
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-08-15, STEPS: `50`, REPEAT: 80, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/unique-collator
// benchmark
// pallet
// --pallet
// pallet-unique
// --wasm-execution
// compiled
// --extrinsic
// *
// --template
// .maintain/frame-weight-template.hbs
// --steps=50
// --repeat=80
// --heap-pages=4096
// --output=./pallets/unique/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_unique.
pub trait WeightInfo {
	fn create_collection() -> Weight;
	fn destroy_collection() -> Weight;
	fn add_to_allow_list() -> Weight;
	fn remove_from_allow_list() -> Weight;
	fn change_collection_owner() -> Weight;
	fn add_collection_admin() -> Weight;
	fn remove_collection_admin() -> Weight;
	fn set_collection_sponsor() -> Weight;
	fn confirm_sponsorship() -> Weight;
	fn remove_collection_sponsor() -> Weight;
	fn set_transfers_enabled_flag() -> Weight;
	fn set_collection_limits() -> Weight;
}

/// Weights for pallet_unique using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Common CreatedCollectionCount (r:1 w:1)
	// Storage: Common DestroyedCollectionCount (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Common CollectionPropertyPermissions (r:0 w:1)
	// Storage: Common CollectionProperties (r:0 w:1)
	// Storage: Common CollectionById (r:0 w:1)
	fn create_collection() -> Weight {
		Weight::from_ref_time(43_143_000)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: Common CollectionById (r:1 w:1)
	// Storage: Nonfungible TokenData (r:1 w:0)
	// Storage: Common DestroyedCollectionCount (r:1 w:1)
	// Storage: Nonfungible TokensMinted (r:0 w:1)
	// Storage: Nonfungible TokensBurnt (r:0 w:1)
	// Storage: Common AdminAmount (r:0 w:1)
	// Storage: Common CollectionProperties (r:0 w:1)
	fn destroy_collection() -> Weight {
		Weight::from_ref_time(50_188_000)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common Allowlist (r:0 w:1)
	fn add_to_allow_list() -> Weight {
		Weight::from_ref_time(18_238_000)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common Allowlist (r:0 w:1)
	fn remove_from_allow_list() -> Weight {
		Weight::from_ref_time(18_084_000)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:1)
	fn change_collection_owner() -> Weight {
		Weight::from_ref_time(18_265_000)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common IsAdmin (r:1 w:1)
	// Storage: Common AdminAmount (r:1 w:1)
	fn add_collection_admin() -> Weight {
		Weight::from_ref_time(23_558_000)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common IsAdmin (r:1 w:1)
	// Storage: Common AdminAmount (r:1 w:1)
	fn remove_collection_admin() -> Weight {
		Weight::from_ref_time(25_285_000)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Common CollectionById (r:1 w:1)
	fn set_collection_sponsor() -> Weight {
		Weight::from_ref_time(17_885_000)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:1)
	fn confirm_sponsorship() -> Weight {
		Weight::from_ref_time(17_897_000)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:1)
	fn remove_collection_sponsor() -> Weight {
		Weight::from_ref_time(17_836_000)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:1)
	fn set_transfers_enabled_flag() -> Weight {
		Weight::from_ref_time(9_714_000)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:1)
	fn set_collection_limits() -> Weight {
		Weight::from_ref_time(18_166_000)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Common CreatedCollectionCount (r:1 w:1)
	// Storage: Common DestroyedCollectionCount (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Common CollectionPropertyPermissions (r:0 w:1)
	// Storage: Common CollectionProperties (r:0 w:1)
	// Storage: Common CollectionById (r:0 w:1)
	fn create_collection() -> Weight {
		Weight::from_ref_time(43_143_000)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: Common CollectionById (r:1 w:1)
	// Storage: Nonfungible TokenData (r:1 w:0)
	// Storage: Common DestroyedCollectionCount (r:1 w:1)
	// Storage: Nonfungible TokensMinted (r:0 w:1)
	// Storage: Nonfungible TokensBurnt (r:0 w:1)
	// Storage: Common AdminAmount (r:0 w:1)
	// Storage: Common CollectionProperties (r:0 w:1)
	fn destroy_collection() -> Weight {
		Weight::from_ref_time(50_188_000)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common Allowlist (r:0 w:1)
	fn add_to_allow_list() -> Weight {
		Weight::from_ref_time(18_238_000)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common Allowlist (r:0 w:1)
	fn remove_from_allow_list() -> Weight {
		Weight::from_ref_time(18_084_000)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:1)
	fn change_collection_owner() -> Weight {
		Weight::from_ref_time(18_265_000)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common IsAdmin (r:1 w:1)
	// Storage: Common AdminAmount (r:1 w:1)
	fn add_collection_admin() -> Weight {
		Weight::from_ref_time(23_558_000)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common IsAdmin (r:1 w:1)
	// Storage: Common AdminAmount (r:1 w:1)
	fn remove_collection_admin() -> Weight {
		Weight::from_ref_time(25_285_000)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: Common CollectionById (r:1 w:1)
	fn set_collection_sponsor() -> Weight {
		Weight::from_ref_time(17_885_000)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:1)
	fn confirm_sponsorship() -> Weight {
		Weight::from_ref_time(17_897_000)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:1)
	fn remove_collection_sponsor() -> Weight {
		Weight::from_ref_time(17_836_000)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:1)
	fn set_transfers_enabled_flag() -> Weight {
		Weight::from_ref_time(9_714_000)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:1)
	fn set_collection_limits() -> Weight {
		Weight::from_ref_time(18_166_000)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
}
