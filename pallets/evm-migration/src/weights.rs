// Template adopted from https://github.com/paritytech/substrate/blob/master/.maintain/frame-weight-template.hbs

//! Autogenerated weights for pallet_evm_migration
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-26, STEPS: `50`, REPEAT: 80, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/unique-collator
// benchmark
// pallet
// --pallet
// pallet-evm-migration
// --wasm-execution
// compiled
// --extrinsic
// *
// --template
// .maintain/frame-weight-template.hbs
// --steps=50
// --repeat=80
// --heap-pages=4096
// --output=./pallets/evm-migration/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_evm_migration.
pub trait WeightInfo {
	fn begin() -> Weight;
	fn set_data(b: u32, ) -> Weight;
	fn finish(b: u32, ) -> Weight;
	fn insert_eth_logs(b: u32, ) -> Weight;
	fn insert_events(b: u32, ) -> Weight;
}

/// Weights for pallet_evm_migration using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: EvmMigration MigrationPending (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: EVM AccountCodes (r:1 w:0)
	fn begin() -> Weight {
		Weight::from_ref_time(15_073_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: EvmMigration MigrationPending (r:1 w:0)
	// Storage: EVM AccountStorages (r:0 w:1)
	fn set_data(b: u32, ) -> Weight {
		Weight::from_ref_time(7_943_438 as u64)
			// Standard Error: 1_792
			.saturating_add(Weight::from_ref_time(960_230 as u64).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(b as u64)))
	}
	// Storage: EvmMigration MigrationPending (r:1 w:1)
	// Storage: EVM AccountCodes (r:0 w:1)
	fn finish(b: u32, ) -> Weight {
		Weight::from_ref_time(9_316_585 as u64)
			// Standard Error: 595
			.saturating_add(Weight::from_ref_time(2_082 as u64).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	fn insert_eth_logs(b: u32, ) -> Weight {
		Weight::from_ref_time(6_570_767 as u64)
			// Standard Error: 2_292
			.saturating_add(Weight::from_ref_time(722_345 as u64).saturating_mul(b as u64))
	}
	fn insert_events(b: u32, ) -> Weight {
		Weight::from_ref_time(10_936_376 as u64)
			// Standard Error: 1_227
			.saturating_add(Weight::from_ref_time(1_311_481 as u64).saturating_mul(b as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: EvmMigration MigrationPending (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: EVM AccountCodes (r:1 w:0)
	fn begin() -> Weight {
		Weight::from_ref_time(15_073_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: EvmMigration MigrationPending (r:1 w:0)
	// Storage: EVM AccountStorages (r:0 w:1)
	fn set_data(b: u32, ) -> Weight {
		Weight::from_ref_time(7_943_438 as u64)
			// Standard Error: 1_792
			.saturating_add(Weight::from_ref_time(960_230 as u64).saturating_mul(b as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(b as u64)))
	}
	// Storage: EvmMigration MigrationPending (r:1 w:1)
	// Storage: EVM AccountCodes (r:0 w:1)
	fn finish(b: u32, ) -> Weight {
		Weight::from_ref_time(9_316_585 as u64)
			// Standard Error: 595
			.saturating_add(Weight::from_ref_time(2_082 as u64).saturating_mul(b as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	fn insert_eth_logs(b: u32, ) -> Weight {
		Weight::from_ref_time(6_570_767 as u64)
			// Standard Error: 2_292
			.saturating_add(Weight::from_ref_time(722_345 as u64).saturating_mul(b as u64))
	}
	fn insert_events(b: u32, ) -> Weight {
		Weight::from_ref_time(10_936_376 as u64)
			// Standard Error: 1_227
			.saturating_add(Weight::from_ref_time(1_311_481 as u64).saturating_mul(b as u64))
	}
}
