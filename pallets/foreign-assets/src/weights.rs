// Template adopted from https://github.com/paritytech/substrate/blob/master/.maintain/frame-weight-template.hbs

//! Autogenerated weights for pallet_foreign_assets
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 29.0.0
//! DATE: 2023-11-29, STEPS: `50`, REPEAT: `80`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bench-host`, CPU: `Intel(R) Core(TM) i7-8700 CPU @ 3.20GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/production/unique-collator
// benchmark
// pallet
// --pallet
// pallet-foreign-assets
// --wasm-execution
// compiled
// --extrinsic
// *
// --template=.maintain/frame-weight-template.hbs
// --steps=50
// --repeat=80
// --heap-pages=4096
// --output=./pallets/foreign-assets/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_foreign_assets.
pub trait WeightInfo {
	fn force_register_foreign_asset() -> Weight;

	fn force_reset_foreign_asset_location() -> Weight;
}

/// Weights for pallet_foreign_assets using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `ForeignAssets::ForeignAssetToCollection` (r:1 w:1)
	/// Proof: `ForeignAssets::ForeignAssetToCollection` (`max_values`: None, `max_size`: Some(615), added: 3090, mode: `MaxEncodedLen`)
	/// Storage: `Common::CreatedCollectionCount` (r:1 w:1)
	/// Proof: `Common::CreatedCollectionCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Common::DestroyedCollectionCount` (r:1 w:0)
	/// Proof: `Common::DestroyedCollectionCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::CollectionToForeignAsset` (r:0 w:1)
	/// Proof: `ForeignAssets::CollectionToForeignAsset` (`max_values`: None, `max_size`: Some(615), added: 3090, mode: `MaxEncodedLen`)
	/// Storage: `Common::AdminAmount` (r:0 w:1)
	/// Proof: `Common::AdminAmount` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Common::CollectionPropertyPermissions` (r:0 w:1)
	/// Proof: `Common::CollectionPropertyPermissions` (`max_values`: None, `max_size`: Some(16726), added: 19201, mode: `MaxEncodedLen`)
	/// Storage: `Common::CollectionProperties` (r:0 w:1)
	/// Proof: `Common::CollectionProperties` (`max_values`: None, `max_size`: Some(40992), added: 43467, mode: `MaxEncodedLen`)
	/// Storage: `Common::CollectionById` (r:0 w:1)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	fn force_register_foreign_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `146`
		//  Estimated: `4080`
		// Minimum execution time: 26_678_000 picoseconds.
		Weight::from_parts(27_177_000, 4080)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}

	// FIXME run the benchmarks
	fn force_reset_foreign_asset_location() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `146`
		//  Estimated: `4080`
		// Minimum execution time: 26_678_000 picoseconds.
		Weight::from_parts(27_177_000, 4080)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `ForeignAssets::ForeignAssetToCollection` (r:1 w:1)
	/// Proof: `ForeignAssets::ForeignAssetToCollection` (`max_values`: None, `max_size`: Some(615), added: 3090, mode: `MaxEncodedLen`)
	/// Storage: `Common::CreatedCollectionCount` (r:1 w:1)
	/// Proof: `Common::CreatedCollectionCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Common::DestroyedCollectionCount` (r:1 w:0)
	/// Proof: `Common::DestroyedCollectionCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ForeignAssets::CollectionToForeignAsset` (r:0 w:1)
	/// Proof: `ForeignAssets::CollectionToForeignAsset` (`max_values`: None, `max_size`: Some(615), added: 3090, mode: `MaxEncodedLen`)
	/// Storage: `Common::AdminAmount` (r:0 w:1)
	/// Proof: `Common::AdminAmount` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Common::CollectionPropertyPermissions` (r:0 w:1)
	/// Proof: `Common::CollectionPropertyPermissions` (`max_values`: None, `max_size`: Some(16726), added: 19201, mode: `MaxEncodedLen`)
	/// Storage: `Common::CollectionProperties` (r:0 w:1)
	/// Proof: `Common::CollectionProperties` (`max_values`: None, `max_size`: Some(40992), added: 43467, mode: `MaxEncodedLen`)
	/// Storage: `Common::CollectionById` (r:0 w:1)
	/// Proof: `Common::CollectionById` (`max_values`: None, `max_size`: Some(860), added: 3335, mode: `MaxEncodedLen`)
	fn force_register_foreign_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `146`
		//  Estimated: `4080`
		// Minimum execution time: 26_678_000 picoseconds.
		Weight::from_parts(27_177_000, 4080)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}

	// FIXME run the benchmarks
	fn force_reset_foreign_asset_location() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `146`
		//  Estimated: `4080`
		// Minimum execution time: 26_678_000 picoseconds.
		Weight::from_parts(27_177_000, 4080)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
}

