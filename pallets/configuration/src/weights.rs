// Template adopted from https://github.com/paritytech/substrate/blob/master/.maintain/frame-weight-template.hbs

//! Autogenerated weights for pallet_configuration
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-13, STEPS: `50`, REPEAT: `80`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bench-host`, CPU: `Intel(R) Core(TM) i7-8700 CPU @ 3.20GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/production/unique-collator
// benchmark
// pallet
// --pallet
// pallet-configuration
// --wasm-execution
// compiled
// --extrinsic
// *
// --template=.maintain/frame-weight-template.hbs
// --steps=50
// --repeat=80
// --heap-pages=4096
// --output=./pallets/configuration/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_configuration.
pub trait WeightInfo {
	fn set_weight_to_fee_coefficient_override() -> Weight;
	fn set_min_gas_price_override() -> Weight;
	fn set_app_promotion_configuration_override() -> Weight;
	fn set_collator_selection_desired_collators() -> Weight;
	fn set_collator_selection_license_bond() -> Weight;
	fn set_collator_selection_kick_threshold() -> Weight;
}

/// Weights for pallet_configuration using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Configuration::WeightToFeeCoefficientOverride` (r:0 w:1)
	/// Proof: `Configuration::WeightToFeeCoefficientOverride` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn set_weight_to_fee_coefficient_override() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_478_000 picoseconds.
		Weight::from_parts(2_614_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Configuration::MinGasPriceOverride` (r:0 w:1)
	/// Proof: `Configuration::MinGasPriceOverride` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: UNKNOWN KEY `0xc1fef3b7207c11a52df13c12884e772609bc3a1e532c9cb85d57feed02cbff8e` (r:0 w:1)
	/// Proof: UNKNOWN KEY `0xc1fef3b7207c11a52df13c12884e772609bc3a1e532c9cb85d57feed02cbff8e` (r:0 w:1)
	/// Storage: UNKNOWN KEY `0xc1fef3b7207c11a52df13c12884e77263864ade243c642793ebcfe9e16f454ca` (r:0 w:1)
	/// Proof: UNKNOWN KEY `0xc1fef3b7207c11a52df13c12884e77263864ade243c642793ebcfe9e16f454ca` (r:0 w:1)
	fn set_min_gas_price_override() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_934_000 picoseconds.
		Weight::from_parts(4_092_000, 0)
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Configuration::AppPromomotionConfigurationOverride` (r:0 w:1)
	/// Proof: `Configuration::AppPromomotionConfigurationOverride` (`max_values`: Some(1), `max_size`: Some(17), added: 512, mode: `MaxEncodedLen`)
	fn set_app_promotion_configuration_override() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_657_000 picoseconds.
		Weight::from_parts(2_768_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Configuration::CollatorSelectionDesiredCollatorsOverride` (r:0 w:1)
	/// Proof: `Configuration::CollatorSelectionDesiredCollatorsOverride` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_collator_selection_desired_collators() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_148_000 picoseconds.
		Weight::from_parts(9_521_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Configuration::CollatorSelectionLicenseBondOverride` (r:0 w:1)
	/// Proof: `Configuration::CollatorSelectionLicenseBondOverride` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_collator_selection_license_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_652_000 picoseconds.
		Weight::from_parts(6_908_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Configuration::CollatorSelectionKickThresholdOverride` (r:0 w:1)
	/// Proof: `Configuration::CollatorSelectionKickThresholdOverride` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_collator_selection_kick_threshold() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_681_000 picoseconds.
		Weight::from_parts(6_885_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Configuration::WeightToFeeCoefficientOverride` (r:0 w:1)
	/// Proof: `Configuration::WeightToFeeCoefficientOverride` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn set_weight_to_fee_coefficient_override() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_478_000 picoseconds.
		Weight::from_parts(2_614_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Configuration::MinGasPriceOverride` (r:0 w:1)
	/// Proof: `Configuration::MinGasPriceOverride` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: UNKNOWN KEY `0xc1fef3b7207c11a52df13c12884e772609bc3a1e532c9cb85d57feed02cbff8e` (r:0 w:1)
	/// Proof: UNKNOWN KEY `0xc1fef3b7207c11a52df13c12884e772609bc3a1e532c9cb85d57feed02cbff8e` (r:0 w:1)
	/// Storage: UNKNOWN KEY `0xc1fef3b7207c11a52df13c12884e77263864ade243c642793ebcfe9e16f454ca` (r:0 w:1)
	/// Proof: UNKNOWN KEY `0xc1fef3b7207c11a52df13c12884e77263864ade243c642793ebcfe9e16f454ca` (r:0 w:1)
	fn set_min_gas_price_override() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_934_000 picoseconds.
		Weight::from_parts(4_092_000, 0)
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Configuration::AppPromomotionConfigurationOverride` (r:0 w:1)
	/// Proof: `Configuration::AppPromomotionConfigurationOverride` (`max_values`: Some(1), `max_size`: Some(17), added: 512, mode: `MaxEncodedLen`)
	fn set_app_promotion_configuration_override() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_657_000 picoseconds.
		Weight::from_parts(2_768_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Configuration::CollatorSelectionDesiredCollatorsOverride` (r:0 w:1)
	/// Proof: `Configuration::CollatorSelectionDesiredCollatorsOverride` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_collator_selection_desired_collators() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_148_000 picoseconds.
		Weight::from_parts(9_521_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Configuration::CollatorSelectionLicenseBondOverride` (r:0 w:1)
	/// Proof: `Configuration::CollatorSelectionLicenseBondOverride` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_collator_selection_license_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_652_000 picoseconds.
		Weight::from_parts(6_908_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Configuration::CollatorSelectionKickThresholdOverride` (r:0 w:1)
	/// Proof: `Configuration::CollatorSelectionKickThresholdOverride` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_collator_selection_kick_threshold() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_681_000 picoseconds.
		Weight::from_parts(6_885_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

