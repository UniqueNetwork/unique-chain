// Template adopted from https://github.com/paritytech/substrate/blob/master/.maintain/frame-weight-template.hbs

//! Autogenerated weights for pallet_configuration
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-18, STEPS: `50`, REPEAT: 80, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/unique-collator
// benchmark
// pallet
// --pallet
// pallet-configuration
// --wasm-execution
// compiled
// --extrinsic
// *
// --template
// .maintain/frame-weight-template.hbs
// --steps=50
// --repeat=80
// --heap-pages=4096
// --output=./pallets/configuration/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_configuration.
pub trait WeightInfo {
	fn set_weight_to_fee_coefficient_override() -> Weight;
	fn set_min_gas_price_override() -> Weight;
	fn set_xcm_allowed_locations() -> Weight;
	fn set_app_promotion_configuration_override() -> Weight;
	fn set_collator_selection_desired_collators() -> Weight;
	fn set_collator_selection_license_bond() -> Weight;
	fn set_collator_selection_kick_threshold() -> Weight;
}

/// Weights for pallet_configuration using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Configuration WeightToFeeCoefficientOverride (r:0 w:1)
	fn set_weight_to_fee_coefficient_override() -> Weight {
		Weight::from_ref_time(4_756_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Configuration MinGasPriceOverride (r:0 w:1)
	fn set_min_gas_price_override() -> Weight {
		Weight::from_ref_time(4_754_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Configuration XcmAllowedLocationsOverride (r:0 w:1)
	fn set_xcm_allowed_locations() -> Weight {
		Weight::from_ref_time(4_875_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Configuration AppPromomotionConfigurationOverride (r:0 w:1)
	fn set_app_promotion_configuration_override() -> Weight {
		Weight::from_ref_time(4_832_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Configuration CollatorSelectionDesiredCollatorsOverride (r:0 w:1)
	fn set_collator_selection_desired_collators() -> Weight {
		Weight::from_ref_time(18_337_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Configuration CollatorSelectionLicenseBondOverride (r:0 w:1)
	fn set_collator_selection_license_bond() -> Weight {
		Weight::from_ref_time(14_806_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Configuration CollatorSelectionKickThresholdOverride (r:0 w:1)
	fn set_collator_selection_kick_threshold() -> Weight {
		Weight::from_ref_time(14_524_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Configuration WeightToFeeCoefficientOverride (r:0 w:1)
	fn set_weight_to_fee_coefficient_override() -> Weight {
		Weight::from_ref_time(4_756_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Configuration MinGasPriceOverride (r:0 w:1)
	fn set_min_gas_price_override() -> Weight {
		Weight::from_ref_time(4_754_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Configuration XcmAllowedLocationsOverride (r:0 w:1)
	fn set_xcm_allowed_locations() -> Weight {
		Weight::from_ref_time(4_875_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Configuration AppPromomotionConfigurationOverride (r:0 w:1)
	fn set_app_promotion_configuration_override() -> Weight {
		Weight::from_ref_time(4_832_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Configuration CollatorSelectionDesiredCollatorsOverride (r:0 w:1)
	fn set_collator_selection_desired_collators() -> Weight {
		Weight::from_ref_time(18_337_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Configuration CollatorSelectionLicenseBondOverride (r:0 w:1)
	fn set_collator_selection_license_bond() -> Weight {
		Weight::from_ref_time(14_806_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Configuration CollatorSelectionKickThresholdOverride (r:0 w:1)
	fn set_collator_selection_kick_threshold() -> Weight {
		Weight::from_ref_time(14_524_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
}
