name: xcm-testnet-build

# Controls when the action will run.
on:
  workflow_call:
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

#Define Workflow variables
env:
  REPO_URL: ${{ github.server_url }}/${{ github.repository }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  prepare-execution-marix:

    name: Prepare execution matrix

    runs-on: [XL]
    outputs:
      matrix: ${{ steps.create_matrix.outputs.matrix }}

    steps:

      - name: Clean Workspace
        uses: AutoModality/action-clean@v1.1.0

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3.1.0
        with:
          ref: ${{ github.head_ref }}  #Checking out head commit

      - name: Read .env file
        uses: xom9ikk/dotenv@v2

      - name: Create Execution matrix
        uses: CertainLach/create-matrix-action@v4
        id: create_matrix
        with:
          matrix: |
            network {opal}, acala_version {${{ env.ACALA_BUILD_BRANCH }}}, moonbeam_version {${{ env.MOONBEAM_BUILD_BRANCH }}}, cumulus_version {${{ env.WESTMINT_BUILD_BRANCH }}}, runtest {testXcmOpal}
            network {quartz}, acala_version {${{ env.KARURA_BUILD_BRANCH }}}, moonbeam_version {${{ env.MOONRIVER_BUILD_BRANCH }}}, cumulus_version {${{ env.STATEMINE_BUILD_BRANCH }}}, runtest {testXcmQuartz}
            network {unique}, acala_version {${{ env.ACALA_BUILD_BRANCH }}}, moonbeam_version {${{ env.MOONBEAM_BUILD_BRANCH }}}, cumulus_version {${{ env.STATEMINT_BUILD_BRANCH }}}, runtest {testXcmUnique}

  xcm-build:
    
    needs: prepare-execution-marix
    # The type of runner that the job will run on
    runs-on: [XL]

    timeout-minutes: 600

    name: ${{ matrix.network }}-build

    continue-on-error: false         #Do not stop testing of matrix runs failed.  As it decided during PR review - it required 50/50& Let's check it with false.

    strategy:
      matrix:
        include: ${{fromJson(needs.prepare-execution-marix.outputs.matrix)}}

    steps:
      - name: Skip if pull request is in Draft
        if: github.event.pull_request.draft == true
        run: exit 1

      - name: Clean Workspace
        uses: AutoModality/action-clean@v1.1.0

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3.1.0
        with:
          ref: ${{ github.head_ref }}  #Checking out head commit

      # Prepare SHA  
      - name: Prepare SHA
        uses: ./.github/actions/prepare

      - name: Read .env file
        uses: xom9ikk/dotenv@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2.0.0
        with:
          username: ${{ secrets.CORE_DOCKERHUB_USERNAME }}
          password: ${{ secrets.CORE_DOCKERHUB_TOKEN }}

      # Check POLKADOT version and build it if it doesn't exist in repository
      - name: Generate ENV related extend Dockerfile file for POLKADOT
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: .docker/Dockerfile-polkadot.j2
          output_file: .docker/Dockerfile-polkadot.${{ env.POLKADOT_BUILD_BRANCH }}.yml
          variables: |
            RUST_TOOLCHAIN=${{ env.RUST_TOOLCHAIN }}
            POLKADOT_BUILD_BRANCH=${{ env.POLKADOT_BUILD_BRANCH }}

      - name: Check if the dockerhub repository contains the needed version POLKADOT
        run: |
          # aquire token
            TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ secrets.CORE_DOCKERHUB_USERNAME }}'", "password": "'${{ secrets.CORE_DOCKERHUB_TOKEN }}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
            export TOKEN=$TOKEN

          # Get TAGS from DOCKERHUB POLKADOT repository
            POLKADOT_TAGS=$(curl -s -H "Authorization: JWT ${TOKEN}" https://hub.docker.com/v2/repositories/uniquenetwork/builder-polkadot/tags/?page_size=100 | jq -r '."results"[]["name"]')
          # Show TAGS
            echo "POLKADOT TAGS:"
            echo $POLKADOT_TAGS
          # Check correct version POLKADOT and build it if it doesn't exist in POLKADOT TAGS
            if [[ ${POLKADOT_TAGS[*]} =~ (^|[[:space:]])"${{ env.POLKADOT_BUILD_BRANCH }}"($|[[:space:]]) ]]; then
                echo "Repository has needed POLKADOT version";
                docker pull uniquenetwork/builder-polkadot:${{ env.POLKADOT_BUILD_BRANCH }}
            else
                echo "Repository has not needed POLKADOT version, so build it";
                cd .docker/ && docker build --no-cache --file ./Dockerfile-polkadot.${{ env.POLKADOT_BUILD_BRANCH }}.yml --tag uniquenetwork/builder-polkadot:${{ env.POLKADOT_BUILD_BRANCH }} .
                echo "Push needed POLKADOT version to the repository";
                docker push uniquenetwork/builder-polkadot:${{ env.POLKADOT_BUILD_BRANCH }}
            fi
        shell: bash

      # Check ACALA version and build it if it doesn't exist in repository
      - name: Generate ENV related extend Dockerfile file for ACALA
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: .docker/Dockerfile-acala.j2
          output_file: .docker/Dockerfile-acala.${{ matrix.acala_version }}.yml
          variables: |
            RUST_TOOLCHAIN=${{ env.RUST_TOOLCHAIN }}
            ACALA_BUILD_BRANCH=${{ matrix.acala_version }}

      - name: Check if the dockerhub repository contains the needed ACALA version
        run: |
          # aquire token
            TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ secrets.CORE_DOCKERHUB_USERNAME }}'", "password": "'${{ secrets.CORE_DOCKERHUB_TOKEN }}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
            export TOKEN=$TOKEN

          # Get TAGS from DOCKERHUB repository
            ACALA_TAGS=$(curl -s -H "Authorization: JWT ${TOKEN}" https://hub.docker.com/v2/repositories/uniquenetwork/builder-acala/tags/?page_size=100 | jq -r '."results"[]["name"]')
          # Show TAGS
            echo "ACALA TAGS:"
            echo $ACALA_TAGS
          # Check correct version ACALA and build it if it doesn't exist in ACALA TAGS
            if [[ ${ACALA_TAGS[*]} =~ (^|[[:space:]])"${{ matrix.acala_version }}"($|[[:space:]]) ]]; then
                echo "Repository has needed ACALA version";
                docker pull uniquenetwork/builder-acala:${{ matrix.acala_version }}
            else
                echo "Repository has not needed ACALA version, so build it";
                cd .docker/ && docker build --no-cache --file ./Dockerfile-acala.${{ matrix.acala_version }}.yml --tag uniquenetwork/builder-acala:${{ matrix.acala_version }} .
                echo "Push needed ACALA version to the repository";
                docker push uniquenetwork/builder-acala:${{ matrix.acala_version }}
            fi
        shell: bash

      # Check MOONBEAM version and build it if it doesn't exist in repository
      - name: Generate ENV related extend Dockerfile file for MOONBEAM
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: .docker/Dockerfile-moonbeam.j2
          output_file: .docker/Dockerfile-moonbeam.${{ matrix.moonbeam_version }}.yml
          variables: |
            RUST_TOOLCHAIN=${{ env.RUST_TOOLCHAIN }}
            MOONBEAM_BUILD_BRANCH=${{ matrix.moonbeam_version }}

      - name: Check if the dockerhub repository contains the needed MOONBEAM version
        run: |
          # aquire token
            TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ secrets.CORE_DOCKERHUB_USERNAME }}'", "password": "'${{ secrets.CORE_DOCKERHUB_TOKEN }}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
            export TOKEN=$TOKEN

          # Get TAGS from DOCKERHUB repository
            MOONBEAM_TAGS=$(curl -s -H "Authorization: JWT ${TOKEN}" https://hub.docker.com/v2/repositories/uniquenetwork/builder-moonbeam/tags/?page_size=100 | jq -r '."results"[]["name"]')
          # Show TAGS
            echo "MOONBEAM TAGS:"
            echo $MOONBEAM_TAGS
          # Check correct version MOONBEAM and build it if it doesn't exist in MOONBEAM TAGS
            if [[ ${MOONBEAM_TAGS[*]} =~ (^|[[:space:]])"${{ matrix.moonbeam_version }}"($|[[:space:]]) ]]; then
                echo "Repository has needed MOONBEAM version";
                docker pull uniquenetwork/builder-moonbeam:${{ matrix.moonbeam_version }}
            else
                echo "Repository has not needed MOONBEAM version, so build it";
                cd .docker/ && docker build --no-cache --file ./Dockerfile-moonbeam.${{ matrix.moonbeam_version }}.yml --tag uniquenetwork/builder-moonbeam:${{ matrix.moonbeam_version }} .
                echo "Push needed MOONBEAM version to the repository";
                docker push uniquenetwork/builder-moonbeam:${{ matrix.moonbeam_version }}
            fi
        shell: bash

      # Check CUMULUS version and build it if it doesn't exist in repository
      - name: Generate ENV related extend Dockerfile file for CUMULUS
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: .docker/Dockerfile-cumulus.j2
          output_file: .docker/Dockerfile-cumulus.${{ matrix.cumulus_version }}.yml
          variables: |
            RUST_TOOLCHAIN=${{ env.RUST_TOOLCHAIN }}
            CUMULUS_BUILD_BRANCH=${{ matrix.cumulus_version }}

      - name: Check if the dockerhub repository contains the needed CUMULUS version
        run: |                 
          # aquire token
            TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ secrets.CORE_DOCKERHUB_USERNAME }}'", "password": "'${{ secrets.CORE_DOCKERHUB_TOKEN }}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
            export TOKEN=$TOKEN

          # Get TAGS from DOCKERHUB repository
            CUMULUS_TAGS=$(curl -s -H "Authorization: JWT ${TOKEN}" https://hub.docker.com/v2/repositories/uniquenetwork/builder-cumulus/tags/?page_size=100 | jq -r '."results"[]["name"]')
          # Show TAGS
            echo "CUMULUS TAGS:"
            echo $CUMULUS_TAGS
          # Check correct version CUMULUS and build it if it doesn't exist in CUMULUS TAGS
            if [[ ${CUMULUS_TAGS[*]} =~ (^|[[:space:]])"${{ matrix.cumulus_version }}"($|[[:space:]]) ]]; then
                echo "Repository has needed CUMULUS version";
                docker pull uniquenetwork/builder-cumulus:${{ matrix.cumulus_version }}
            else
                echo "Repository has not needed CUMULUS version, so build it";
                cd .docker/ && docker build --no-cache --file ./Dockerfile-cumulus.${{ matrix.cumulus_version }}.yml --tag uniquenetwork/builder-cumulus:${{ matrix.cumulus_version }} .
                echo "Push needed CUMULUS version to the repository";
                docker push uniquenetwork/builder-cumulus:${{ matrix.cumulus_version }}
            fi
        shell: bash

      - name: Pull chainql docker image
        run: docker pull uniquenetwork/builder-chainql:latest

      - name: Generate ENV related extend launch-config file
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: .docker/xcm-config/launch-config-xcm-${{ matrix.network }}.j2
          output_file: .docker/xcm-config/launch-config-xcm-${{ matrix.network }}.json
          variables: |
            RELAY_CHAIN_TYPE=${{ env.RELAY_CHAIN_TYPE }}           

      - name: Show launch-config-xcm-${{ matrix.network }} configuration
        run: cat .docker/xcm-config/launch-config-xcm-${{ matrix.network }}.json

      # Build main image for XCM   
      - name: Generate ENV related extend Dockerfile file
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: .docker/Dockerfile-xcm.j2
          output_file: .docker/Dockerfile-xcm.${{ matrix.network }}.yml
          variables: |
            RUST_TOOLCHAIN=${{ env.RUST_TOOLCHAIN }}
            NETWORK=${{ matrix.network }}
            POLKADOT_BUILD_BRANCH=${{ env.POLKADOT_BUILD_BRANCH }}
            POLKADOT_LAUNCH_BRANCH=${{ env.POLKADOT_LAUNCH_BRANCH }}           
            BRANCH=${{ github.head_ref }}
            ACALA_BUILD_BRANCH=${{ matrix.acala_version }}
            MOONBEAM_BUILD_BRANCH=${{ matrix.moonbeam_version }}
            CUMULUS_BUILD_BRANCH=${{ matrix.cumulus_version }}

      - name: Show build Dockerfile
        run: cat .docker/Dockerfile-xcm.${{ matrix.network }}.yml

      - name: Run find-and-replace to remove slashes from branch name
        uses: mad9000/actions-find-and-replace-string@3
        id: branchname
        with:
          source: ${{ github.head_ref }}
          find: '/'
          replace: '-'

      - name: Set build SHA
        shell: bash
        run: |
          echo "BUILD_SHA=${LAST_COMMIT_SHA:0:8}" >> $GITHUB_ENV

      - name: Build the stack
        run: cd .docker/ && docker build --no-cache --file ./Dockerfile-xcm.${{ matrix.network }}.yml --tag uniquenetwork/ci-xcm-local:${{ matrix.network }}-${{ steps.branchname.outputs.value }}-$BUILD_SHA .

      - name: Push docker image version
        run: docker push uniquenetwork/ci-xcm-local:${{ matrix.network }}-${{ steps.branchname.outputs.value }}-$BUILD_SHA

      - name: Remove builder cache
        if: always()                   # run this step always
        run: |
          docker builder prune -f
          docker system prune -f

  xcm-tests:
    needs: [prepare-execution-marix, xcm-build]
    # The type of runner that the job will run on
    runs-on: [XL]

    timeout-minutes: 600

    name: ${{ matrix.network }}-tests

    continue-on-error: false         #Do not stop testing of matrix runs failed.  As it decided during PR review - it required 50/50& Let's check it with false.

    strategy:
      matrix:
        include: ${{fromJson(needs.prepare-execution-marix.outputs.matrix)}}

    steps:
      - name: Skip if pull request is in Draft
        if: github.event.pull_request.draft == true
        run: exit 1

      - name: Clean Workspace
        uses: AutoModality/action-clean@v1.1.0

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3.1.0
        with:
          ref: ${{ github.head_ref }}  #Checking out head commit

      - name: Prepare
        uses: ./.github/actions/prepare

      - name: Set build SHA
        shell: bash
        run: |
          echo "BUILD_SHA=${LAST_COMMIT_SHA:0:8}" >> $GITHUB_ENV

      - name: Run find-and-replace to remove slashes from branch name
        uses: mad9000/actions-find-and-replace-string@2
        id: branchname
        with:
          source: ${{ github.head_ref }}
          find: '/'
          replace: '-'

      - name: Read .env file
        uses: xom9ikk/dotenv@v2

      - name: Generate ENV related extend file for docker-compose
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: .docker/docker-compose.tmp-xcm-tests.j2
          output_file: .docker/docker-compose.xcm-tests.${{ matrix.network }}.yml
          variables: |
            NETWORK=${{ matrix.network }}
            BUILD_TAG=${{ steps.branchname.outputs.value }}-$BUILD_SHA

      - name: Show build configuration
        run: cat .docker/docker-compose.xcm-tests.${{ matrix.network }}.yml

      - uses: actions/setup-node@v3.5.1
        with:
          node-version: 16

      - name: Log in to Docker Hub
        uses: docker/login-action@v2.0.0
        with:
          username: ${{ secrets.CORE_DOCKERHUB_USERNAME }}
          password: ${{ secrets.CORE_DOCKERHUB_TOKEN }}

      - name: Build the stack
        run: docker-compose -f ".docker/docker-compose.xcm-tests.${{ matrix.network }}.yml" up -d --remove-orphans --force-recreate --timeout 300

      #  🚀 POLKADOT LAUNCH COMPLETE 🚀
      - name: Check if docker logs consist messages related to testing of xcm tests 
        if: success()
        run: |
          counter=160
          function check_container_status {
                docker inspect -f {{.State.Running}} xcm-${{ matrix.network }}-local
          }
          function do_docker_logs {
                docker logs --details xcm-${{ matrix.network }}-local 2>&1
          }
          function is_started {
                if [ "$(check_container_status)" == "true" ]; then
                        echo "Container: xcm-${{ matrix.network }}-local RUNNING";
                        echo "Check Docker logs"
                        DOCKER_LOGS=$(do_docker_logs)
                        if [[ ${DOCKER_LOGS} = *"POLKADOT LAUNCH COMPLETE"* ]];then
                                echo "🚀 POLKADOT LAUNCH COMPLETE 🚀"
                                return 0
                        else
                                echo "Message not found in logs output, repeating..."
                                return 1
                        fi
                else
                        echo "Container xcm-${{ matrix.network }}-local NOT RUNNING"
                        echo "Halting all future checks"
                        exit 1
                fi
          echo "something goes wrong"
          exit 1
          }
          while ! is_started; do
                echo "Waiting for special message in log files "
                sleep 30s
                counter=$(( $counter - 1 ))
                echo "Counter: $counter"
                if [ "$counter" -gt "0" ]; then
                         continue
                else
                         break
                fi
          done
          echo "Halting script"
          exit 0
        shell: bash

      - name: Run XCM tests 
        working-directory: tests
        run: |
          yarn install
          yarn add mochawesome
          ./scripts/wait_for_first_block.sh
          echo "Ready to start tests"
          yarn polkadot-types          
          NOW=$(date +%s) && yarn ${{ matrix.runtest }} --reporter mochawesome --reporter-options reportFilename=test-${NOW}
        env:
          RPC_URL: http://127.0.0.1:9933/

      - name: XCM Test Report
        uses: phoenix-actions/test-reporting@v10
        id: test-report
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: XCM Tests ${{ matrix.network }}            # Name of the check run which will be created
          path: tests/mochawesome-report/test-*.json    # Path to test results
          reporter: mochawesome-json
          fail-on-error: 'false'

      - name: Stop running containers
        if: always()                   # run this step always
        run: docker-compose -f ".docker/docker-compose.xcm-tests.${{ matrix.network }}.yml" down

      - name: Clean Workspace
        if: always()
        uses: AutoModality/action-clean@v1.1.0

      - name: Remove builder cache
        if: always()                   # run this step always
        run: |
          docker system prune -a -f
