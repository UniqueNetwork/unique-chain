name: Build & test

# Controls when the action will run.
on:
 # Triggers the workflow on push or pull request events but only for the master branch
  #push:
  #  branches: [ develop ]
  pull_request:
    branches:
      - develop
    types:
      - opened
      - edited
      - reopened
  # pull_request:
 #   branches: [ develop ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

#Define Workflow variables
env:
  ubuntu_version: focal
  chains_release_dir: /opt/runner/chains_release
  opal_chain_workdir: ./src_opal_chain
  quartz_chain_workdir: ./src_quartz_chain
  unique_chain_workdir: ./src_unique_chain
  src_repo_url: https://github.com/lzadjsf/unique-chain.git
  actual_toolchain: nightly-2022-05-11
  RUST_TOOLCHAIN: nightly-2022-05-11
  REPO_URL: ${{ github.repositoryUrl }}
  features: --features=quartz-runtime

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  pre-requisites:
    # The type of runner that the job will run on
    runs-on: ci-01

    steps:
      #runs ssh connection
      - name: Install dependencies
        run: |
          sudo apt-get install git curl libssl-dev llvm pkg-config libclang-dev clang make cmake
          sudo apt autoremove
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain none
          . $HOME/.cargo/env && cargo install --locked --git https://github.com/chevdor/subwasm
          rustup toolchain install ${{ env.actual_toolchain }}
          rustup default ${{ env.actual_toolchain }}
          rustup target add wasm32-unknown-unknown --toolchain ${{ env.actual_toolchain }}


      # Re-create release directory
      - name: delete release dir
        run: rm -rf ${{ env.chains_release_dir }}


      - name: create release dir
        run: mkdir -p ${{ env.chains_release_dir }}


  build:
    # The type of runner that the job will run on
    runs-on: ci-01

    needs: pre-requisites
    name: Build Container and Spin it Up

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Echo variables
        run: |
          echo "github.repositoryUrl: ${{ github.repositoryUrl }}"
          echo "github.token: ${{ github.token }}"
          echo "env.features: ${{ env.features }}"
          echo "env.RUST_TOOLCHAIN: ${{ env.RUST_TOOLCHAIN }}"
          echo "env.REPO_URL: ${{ env.REPO_URL }}"
          echo "github.repository: ${{ github.repository }}"
          echo "github.server_url: ${{ github.server_url }}"

      - name: Generate ENV related extend file for docker-compose
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: .docker/docker-compose.tmp.j2
          output_file: .docker/docker-compose.${{ env.features }}.yml
          variables: |
            REPO_URL=${{ github.server_url }}/${{ github.repository }}.git
            RUST_TOOLCHAIN=${{ env.actual_toolchain }}
            FEATURE=${{ env.features }}
            BRANCH=${{ github.head_ref }}

      - name: Show temporasry file
        run: cat .docker/docker-compose.${{ env.features }}.yml

      - name: Build the stack
        run: docker-compose -f ".docker/docker-compose-dev.yaml" -f ".docker/docker-compose.${{ env.features }}.yml" up -d --build

#      - name: "Build the Docker image with Feature: ${{ env.features }}"
#        run: docker build -t build-${{ github.head_ref }} --file .docker/Dockerfile-chain-dev --build-arg REPO_URL=${{ github.server_url }}/${{ github.repository }}.git --build-arg RUST_TOOLCHAIN=${{ env.actual_toolchain }} --build-arg FEATURE="${{ env.features }}" --build-arg BRANCH=${{ github.head_ref }} --no-cache .


      - name: Wait
        run: sleep 600s

  test:
    # The type of runner that the job will run on
    runs-on: ci-01

    #if: ${{ always() }} - it requires if you need to run this job even previous failed.
    needs: [ build, pre-requisites ]
    name: Tests

    steps:

      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: Install dependencies
        run: |
          cd tests
          yarn install
          yarn add mochawesome
          yarn --pure-lockfile

      - name: Run tests
        run: |
          cd tests
          ./scripts/ci-check-docker-state.sh
          NOW=$(date +%s) && yarn test --reporter mochawesome --reporter-options reportFilename=test-${NOW}
        env:
          RPC_URL: http://127.0.0.1:9933/

      - name: Test Report
        uses: phoenix-actions/test-reporting@v8
        id: test-report               # Set ID reference for step
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Tests            # Name of the check run which will be created
          path: tests/mochawesome-report/test-*.json    # Path to test results
          reporter: mochawesome-json
          fail-on-error: 'false'

      - name: Stop running containers
        if: always()
        run: docker-compose -f ".docker/docker-compose-dev.yaml" -f ".docker/docker-compose.${{ env.features }}.yml" down

#      - name: Stop containers
#        if: always()
#        run: docker-compose -f ".docker/docker-compose-dev.yaml" down
