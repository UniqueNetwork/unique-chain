name: Development

on:
  push:
    branches:
      - develop
      - feature/ci-cd
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ["self-hosted", "linux", "x64", "hetzner"]
    name: Build & Publish
    environment: development
    strategy:
      max-parallel: 1
      matrix:
       include:
        - DOCKER_TAG: 'latest'
          DOCKER_FILE: './Dockerfile-parachain'
        - DOCKER_TAG: 'tests'
          DOCKER_FILE: './Dockerfile-tests'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

    #   - name: Login to Docker Hub
    #     uses: docker/login-action@v1
    #     with:
    #       username: ${{ secrets.DOCKER_HUB_USERNAME }}
    #       password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push the Docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
        #   push: true
          context: .
          file: ${{ matrix.DOCKER_FILE }}
          builder: ${{ steps.buildx.outputs.name }}
          tags: ${{ secrets.DOCKER_IMAGE }}:${{ matrix.DOCKER_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          load: true


  deploy:
    runs-on: ["self-hosted", "linux", "x64", "hetzner"]
    name: Deploy
    needs: build-and-publish
    environment: development
    strategy:
      max-parallel: 1
      matrix:
       include:
        - DOCKER_TAG: 'latest'
          DOCKER_SERVICE: 'unique.substrate'
        - DOCKER_TAG: 'tests'
          DOCKER_SERVICE: 'unique.substrate.tests'
    steps:
      - name: Checkout code
        uses: actions/checkout@v1

    #   - name: Login to Docker Hub
    #     uses: docker/login-action@v1
    #     with:
    #       username: ${{ secrets.DOCKER_HUB_USERNAME }}
    #       password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Create .env file
        run: echo "${{ secrets.UNIQUE_SUBSTRATE_ENV }}" > ${{ secrets.DOCKER_DATA_PATH }}/.env
        
      - name: Run Docker Compose
        env:
          DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE }}:${{ matrix.DOCKER_TAG }}
          DOCKER_NAME: ${{ secrets.DOCKER_NAME }}.${{ matrix.DOCKER_TAG }}
          DOCKER_NETWORK: ${{ secrets.DOCKER_NETWORK }}
          DOCKER_CPU_LIMITS: ${{ secrets.DOCKER_CPU_LIMITS }}
          DOCKER_MEMORY_LIMIT: ${{ secrets.DOCKER_MEMORY_LIMIT }}
          DOCKER_DATA_PATH: ${{ secrets.DOCKER_DATA_PATH }}
        # run: docker pull ${{ secrets.DOCKER_IMAGE }}:${{ secrets.DOCKER_TAG }} && docker-compose  --compatibility  up -d --no-build --force-recreate unique.substrate
        run: docker-compose  --compatibility  up -d --no-build --force-recreate ${{ matrix.DOCKER_SERVICE }}
        
      - name: Check status
        run: docker ps --all --latest --size
 
  notify:
    runs-on: ["self-hosted", "linux", "x64", "hetzner"]
    name: Notification
    needs: deploy
    environment: development
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_USERNAME: GitHub
          SLACK_ICON: https://github.com/github.png?size=48
          SLACK_MESSAGE: ${{ secrets.UNIQUE_NETWORK_URL }} successfully updated ðŸ”„
          SLACK_FOOTER: ""
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
