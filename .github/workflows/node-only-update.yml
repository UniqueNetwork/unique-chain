# https://cryptousetech.atlassian.net/wiki/spaces/CI/pages/2586837028/Nodes+only+update
# Node only update with restart polkadot-launch process.

name: nodes-only update

# Triger: only call from main workflow(re-usable workflows)
on:
  workflow_call:


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  prepare-execution-matrix:

    name: execution matrix

    runs-on: self-hosted-ci
    outputs:
      matrix: ${{ steps.create_matrix.outputs.matrix }}

    steps:

      - name: Clean Workspace
        uses: AutoModality/action-clean@v1.1.0

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3.1.0
        with:
          ref: ${{ github.head_ref }}  #Checking out head commit

      - name: Read .env file
        uses: xom9ikk/dotenv@v2

      - name: Create Execution matrix
        uses: CertainLach/create-matrix-action@v4
        id: create_matrix
        with:
          matrix: |
            network {opal}, mainnet_branch {${{ env.OPAL_MAINNET_BRANCH }}}, relay_branch {${{ env.UNIQUEWEST_MAINNET_BRANCH }}}, runtime_features {opal-runtime}
            network {sapphire}, mainnet_branch {${{ env.SAPPHIRE_MAINNET_BRANCH }}}, relay_branch {${{ env.UNIQUEEAST_MAINNET_BRANCH }}}, runtime_features {sapphire-runtime}
            network {quartz}, mainnet_branch {${{ env.QUARTZ_MAINNET_BRANCH }}}, relay_branch {${{ env.KUSAMA_MAINNET_BRANCH }}}, runtime_features {quartz-runtime}
            network {unique}, mainnet_branch {${{ env.UNIQUE_MAINNET_BRANCH }}}, relay_branch {${{ env.POLKADOT_MAINNET_BRANCH }}}, runtime_features {unique-runtime}

  node-only-update-build:

    needs: prepare-execution-matrix
    # The type of runner that the job will run on
    runs-on: [self-hosted-ci]

    timeout-minutes: 2880           # 48 hours for execution jobs.

    name: ${{ matrix.network }}-build

    continue-on-error: true         #Do not stop testing of matrix runs failed.  As it decided during PR review - it required 50/50& Let's check it with false.

    strategy:
      matrix:
        include: ${{fromJson(needs.prepare-execution-matrix.outputs.matrix)}}

    steps:

      - name: Skip if pull request is in Draft
        if: github.event.pull_request.draft == true
        run: exit 1

      - name: Clean Workspace
        uses: AutoModality/action-clean@v1.1.0

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3.1.0
        with:
          ref: ${{ github.head_ref }}  #Checking out head commit

      # Prepare SHA  
      - name: Prepare SHA
        uses: ./.github/actions/prepare

      - name: Read .env file
        uses: xom9ikk/dotenv@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.CORE_DOCKERHUB_USERNAME }}
          password: ${{ secrets.CORE_DOCKERHUB_TOKEN }}

      - name: Generate ENV related extend Dockerfile file for POLKADOT
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: .docker/Dockerfile-polkadot.j2
          output_file: .docker/Dockerfile-polkadot.${{ matrix.relay_branch }}.yml
          variables: |
            RUST_TOOLCHAIN=${{ env.RUST_TOOLCHAIN }}
            POLKADOT_BUILD_BRANCH=${{ matrix.relay_branch }}
            
      - name: Prepare polkadot
        uses: ./.github/actions/buildContainer
        id: polkadot
        with:
          container: uniquenetwork/builder-polkadot
          tag: ${{ matrix.relay_branch }}
          context: .docker
          dockerfile: Dockerfile-polkadot.${{ matrix.relay_branch }}.yml
          dockerhub_username: ${{ secrets.CORE_DOCKERHUB_USERNAME }}
          dockerhub_token: ${{ secrets.CORE_DOCKERHUB_TOKEN }}

      - name: Prepare mainnet
        uses: ./.github/actions/buildContainer
        id: mainnet
        with:
          container: uniquenetwork/ci-node-only-${{ matrix.network }}
          tag: ${{ matrix.mainnet_branch }}
          context: .docker
          dockerfile: Dockerfile-unique-release
          args: |
            --build-arg RUNTIME_FEATURES=${{ matrix.runtime_features }}
            --build-arg RUST_TOOLCHAIN=${{ env.RUST_TOOLCHAIN }}
            --build-arg UNIQUE_VERSION=${{ matrix.mainnet_branch }}
          dockerhub_username: ${{ secrets.CORE_DOCKERHUB_USERNAME }}
          dockerhub_token: ${{ secrets.CORE_DOCKERHUB_TOKEN }}

      - name: Prepare latest
        uses: ./.github/actions/buildContainer
        id: latest
        with:
          container: uniquenetwork/ci-node-only-${{ matrix.network }}
          tag: ${{ env.REF_SLUG }}-${{ env.BUILD_SHA }}
          context: .
          dockerfile: .docker/Dockerfile-unique
          args: |
            --build-arg RUNTIME_FEATURES=${{ matrix.runtime_features }}
            --build-arg RUST_TOOLCHAIN=${{ env.RUST_TOOLCHAIN }}
          dockerhub_username: ${{ secrets.CORE_DOCKERHUB_USERNAME }}
          dockerhub_token: ${{ secrets.CORE_DOCKERHUB_TOKEN }}

      - name: Checkout at '${{ matrix.mainnet_branch }}' branch
        uses: actions/checkout@master
        with:
          ref: ${{ github.head_ref }}
          # ref: ${{ matrix.mainnet_branch }}  #Checking out head commit
          path: ${{ matrix.mainnet_branch }}

      - uses: actions/setup-node@v3.5.1
        with:
          node-version: 18

      - name: Install baedeker
        uses: UniqueNetwork/baedeker-action/setup@built

      - name: Setup library
        run: mkdir -p .baedeker/vendor/ && git clone https://github.com/UniqueNetwork/baedeker-library .baedeker/vendor/baedeker-library

      - name: Start network
        uses: UniqueNetwork/baedeker-action@built
        id: bdk
        with:
          jpath: |
            .baedeker/vendor
          tla-str: |
            relay_spec=westend-local
          inputs: |
            .baedeker/node-only.jsonnet
            snippet:(import 'baedeker-library/ops/rewrites.libsonnet').rewriteNodePaths({'bin/polkadot':{dockerImage:'${{ steps.polkadot.outputs.name }}'}})
            ephemeral:snippet:(import 'baedeker-library/ops/rewrites.libsonnet').rewriteNodePaths({'bin/unique':{dockerImage:'${{ steps.mainnet.outputs.name }}'}}, extra_node_mixin = {legacyRpc: true})

      - name: Run Parallel tests before Node Parachain upgrade
        working-directory: ${{ matrix.mainnet_branch }}/tests
        if: success() || failure()
        run: |
          yarn
          yarn add mochawesome
          ./scripts/wait_for_first_block.sh
          echo "Ready to start tests"
          NOW=$(date +%s) && yarn testParallel --reporter mochawesome --reporter-options reportFilename=test-parallel-${NOW}
        env:
          RPC_URL: ${{ env.RELAY_UNIQUE_HTTP_URL }}

      - name: Run Sequential tests before Node Parachain upgrade
        if: success() || failure()
        working-directory: ${{ matrix.mainnet_branch }}/tests
        run: NOW=$(date +%s) && yarn testSequential --reporter mochawesome --reporter-options reportFilename=test-sequential-${NOW}
        env:
          RPC_URL: ${{ env.RELAY_UNIQUE_HTTP_URL }}

      - name: "Reconcile: only one old node"
        if: success() || failure()
        uses: UniqueNetwork/baedeker-action/reconcile@built
        with:
          baedeker: ${{ steps.bdk.baedeker }}
          # Chain should always be built with the mainnet spec, this we first set binary for all nodes expect one, then set mainnet binary for the last node, and then force chainspec to be still generated from mainnet
          inputs: |
            snippet:(import 'baedeker-library/ops/rewrites.libsonnet').rewriteNodePaths({'bin/unique':{dockerImage:'${{ steps.latest.outputs.name }}'}}, leave = 1, for_chain = false)
            snippet:(import 'baedeker-library/ops/rewrites.libsonnet').rewriteNodePaths({'bin/unique':{dockerImage:'${{ steps.mainnet.outputs.name }}'}}, extra_node_mixin = {legacyRpc: true}, for_chain = false)
            snippet:(import 'baedeker-library/ops/rewrites.libsonnet').rewriteNodePaths({'bin/unique':{dockerImage:'${{ steps.mainnet.outputs.name }}'}})

      - name: Ensure network is alive
        if: success() || failure()    # run this step even if previous step failed
        run: |
          ./tests/scripts/wait_for_first_block.sh
        env:
          RPC_URL: ${{ env.RELAY_UNIQUE_HTTP_URL }}

      - name: "Reconcile: all nodes are updated"
        if: success() || failure()
        uses: UniqueNetwork/baedeker-action/reconcile@built
        with:
          baedeker: ${{ steps.bdk.baedeker }}
          # Chain should always be built with the mainnet spec, this we first set binary for all nodes, and then force chainspec to be still generated from mainnet
          inputs: |
            snippet:(import 'baedeker-library/ops/rewrites.libsonnet').rewriteNodePaths({'bin/unique':{dockerImage:'${{ steps.latest.outputs.name }}'}}, for_chain = false)
            snippet:(import 'baedeker-library/ops/rewrites.libsonnet').rewriteNodePaths({'bin/unique':{dockerImage:'${{ steps.mainnet.outputs.name }}'}})

      - name: Run Parallel tests after Node Parachain upgrade
        working-directory: ${{ matrix.mainnet_branch }}/tests
        if: success() || failure()    # run this step even if previous step failed
        run: |
          yarn install
          yarn add mochawesome
          ./scripts/wait_for_first_block.sh
          echo "Ready to start tests"
          NOW=$(date +%s) && yarn testParallel --reporter mochawesome --reporter-options reportFilename=test-parallel-${NOW}
        env:
          RPC_URL: ${{ env.RELAY_UNIQUE_HTTP_URL }}

      - name: Run Sequential tests after Node Parachain upgrade
        if: success() || failure()
        working-directory: ${{ matrix.mainnet_branch }}/tests
        run: NOW=$(date +%s) && yarn testSequential --reporter mochawesome --reporter-options reportFilename=test-sequential-${NOW}
        env:
          RPC_URL: ${{ env.RELAY_UNIQUE_HTTP_URL }}

      - name: Remove builder cache
        if: always()                   # run this step always
        run: |
          docker system prune -f
