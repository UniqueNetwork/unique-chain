// Copyright 2019-2022 Unique Network (Gibraltar) Ltd.
// This file is part of Unique Network.

// Unique Network is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Unique Network is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Unique Network. If not, see <http://www.gnu.org/licenses/>.

use frame_support::{
	derive_impl,
	dispatch::DispatchClass,
	ord_parameter_types, parameter_types,
	traits::{
		fungible, fungibles,
		tokens::{Fortitude, PayFromAccount, Precision, Preservation, UnityAssetBalanceConversion},
		ConstBool, ConstU32, ConstU64, NeverEnsureOrigin,
	},
	weights::{
		constants::{BlockExecutionWeight, ExtrinsicBaseWeight, RocksDbWeight},
		ConstantMultiplier,
	},
	PalletId,
};
use frame_system::{
	limits::{BlockLength, BlockWeights},
	EnsureRoot, EnsureSignedBy,
};
use pallet_asset_tx_payment::OnChargeAssetTransaction;
use pallet_transaction_payment::{ConstFeeMultiplier, Multiplier};
use sp_arithmetic::traits::One;
use sp_runtime::{
	traits::{AccountIdLookup, BlakeTwo256, DispatchInfoOf, IdentityLookup, PostDispatchInfoOf},
	FixedPointNumber, FixedU128, Perbill, Percent, Permill,
};
use sp_std::{vec, vec::Vec};
use up_common::{constants::*, types::*};

use crate::{
	runtime_common::DealWithFees, Balances, Block, ForeignAssets, OriginCaller, PalletInfo,
	Runtime, RuntimeCall, RuntimeEvent, RuntimeFreezeReason, RuntimeHoldReason, RuntimeOrigin,
	RuntimeTask, SS58Prefix, System, Treasury, Version,
};

parameter_types! {
	pub const BlockHashCount: BlockNumber = 2400;
	pub RuntimeBlockLength: BlockLength =
		BlockLength::max_with_normal_ratio(5 * 1024 * 1024, NORMAL_DISPATCH_RATIO);
	pub const AvailableBlockRatio: Perbill = Perbill::from_percent(75);
	pub const MaximumBlockLength: u32 = 5 * 1024 * 1024;
	pub RuntimeBlockWeights: BlockWeights = BlockWeights::builder()
		.base_block(BlockExecutionWeight::get())
		.for_class(DispatchClass::all(), |weights| {
			weights.base_extrinsic = ExtrinsicBaseWeight::get();
		})
		.for_class(DispatchClass::Normal, |weights| {
			weights.max_total = Some(NORMAL_DISPATCH_RATIO * MAXIMUM_BLOCK_WEIGHT);
		})
		.for_class(DispatchClass::Operational, |weights| {
			weights.max_total = Some(MAXIMUM_BLOCK_WEIGHT);
			// Operational transactions have some extra reserved space, so that they
			// are included even if block reached `MAXIMUM_BLOCK_WEIGHT`.
			weights.reserved = Some(
				MAXIMUM_BLOCK_WEIGHT - NORMAL_DISPATCH_RATIO * MAXIMUM_BLOCK_WEIGHT
			);
		})
		.avg_block_initialization(AVERAGE_ON_INITIALIZE_RATIO)
		.build_or_panic();
}

#[derive_impl(frame_system::config_preludes::ParaChainDefaultConfig as frame_system::DefaultConfig)]
impl frame_system::Config for Runtime {
	/// The data to be stored in an account.
	type AccountData = pallet_balances::AccountData<Balance>;
	/// The identifier used to distinguish between accounts.
	type AccountId = AccountId;
	/// Maximum number of block number to block hash mappings to keep (oldest pruned first).
	type BlockHashCount = BlockHashCount;
	/// The block type.
	type Block = Block;
	/// The maximum length of a block (in bytes).
	type BlockLength = RuntimeBlockLength;
	/// The weight of the overhead invoked on the block import process, independent of the extrinsics included in that block.
	type BlockWeights = RuntimeBlockWeights;
	/// The weight of database operations that the runtime can invoke.
	type DbWeight = RocksDbWeight;
	/// The type for hashing blocks and tries.
	type Hash = Hash;
	/// The hashing algorithm used.
	type Hashing = BlakeTwo256;
	/// The index type for storing how many extrinsics an account has signed.
	type Nonce = Nonce;
	/// The lookup mechanism to get account ID from whatever is passed in dispatchers.
	type Lookup = AccountIdLookup<AccountId, ()>;
	type OnSetCode = cumulus_pallet_parachain_system::ParachainSetCode<Self>;
	/// The ubiquitous origin type.
	type RuntimeOrigin = RuntimeOrigin;
	/// This type is being generated by `construct_runtime!`.
	type PalletInfo = PalletInfo;
	/// This is used as an identifier of the chain. 42 is the generic substrate prefix.
	type SS58Prefix = SS58Prefix;
	/// Weight information for the extrinsics of this pallet.
	type SystemWeightInfo = frame_system::weights::SubstrateWeight<Self>;
	/// Version of the runtime.
	type Version = Version;
	type MaxConsumers = ConstU32<16>;
}

parameter_types! {
	pub const MigrationMaxKeyLen: u32 = 512;
}
ord_parameter_types! {
	pub const TrieMigrationSigned: AccountId = AccountId::from(hex_literal::hex!("3e2ee9b68b52c239488e8abbeb31284c0d4342ec7c3b53f8e50855051d54a319"));
}

impl pallet_state_trie_migration::Config for Runtime {
	type WeightInfo = pallet_state_trie_migration::weights::SubstrateWeight<Self>;
	type RuntimeEvent = RuntimeEvent;
	type Currency = Balances;
	type SignedDepositPerItem = ();
	type SignedDepositBase = ();
	type ControlOrigin = EnsureRoot<AccountId>;
	// Only root can perform this migration
	type SignedFilter = EnsureSignedBy<TrieMigrationSigned, AccountId>;
	type MaxKeyLen = MigrationMaxKeyLen;
	type RuntimeHoldReason = RuntimeHoldReason;
}

impl pallet_timestamp::Config for Runtime {
	/// A timestamp: milliseconds since the unix epoch.
	type Moment = u64;
	type OnTimestampSet = ();
	type MinimumPeriod = ConstU64<0>;
	type WeightInfo = ();
}

parameter_types! {
	// pub const ExistentialDeposit: u128 = 500;
	pub const ExistentialDeposit: u128 = EXISTENTIAL_DEPOSIT;
	pub const MaxLocks: u32 = 50;
	pub const MaxReserves: u32 = 50;
	pub const MaxHolds: u32 = 10;
	pub const MaxFreezes: u32 = 10;
}

impl pallet_balances::Config for Runtime {
	type MaxLocks = MaxLocks;
	type MaxReserves = MaxReserves;
	type ReserveIdentifier = [u8; 16];
	/// The type for recording an account's balance.
	type Balance = Balance;
	/// The ubiquitous event type.
	type RuntimeEvent = RuntimeEvent;
	// FIXME: Is () the new treasury?
	// Switch to real treasury once we start having dust removals
	// Related issue: https://github.com/paritytech/polkadot/issues/7323
	type DustRemoval = ();
	type ExistentialDeposit = ExistentialDeposit;
	type AccountStore = System;
	type WeightInfo = pallet_balances::weights::SubstrateWeight<Self>;
	type RuntimeHoldReason = RuntimeHoldReason;
	type RuntimeFreezeReason = RuntimeFreezeReason;
	type FreezeIdentifier = [u8; 16];
	type MaxFreezes = MaxFreezes;
	type DoneSlashHandler = ();
}

parameter_types! {
	/// This value increases the priority of `Operational` transactions by adding
	/// a "virtual tip" that's equal to the `OperationalFeeMultiplier * final_fee`.
	pub const OperationalFeeMultiplier: u8 = 5;

	pub FeeMultiplier: Multiplier = Multiplier::one();
}

impl pallet_transaction_payment::Config for Runtime {
	type RuntimeEvent = RuntimeEvent;
	#[allow(deprecated)]
	type OnChargeTransaction = pallet_transaction_payment::CurrencyAdapter<Balances, DealWithFees>;
	type LengthToFee = ConstantMultiplier<Balance, TransactionByteFee>;
	type OperationalFeeMultiplier = OperationalFeeMultiplier;
	type WeightToFee = pallet_configuration::WeightToFee<Self, Balance>;
	type FeeMultiplierUpdate = ConstFeeMultiplier<FeeMultiplier>;
	type WeightInfo = pallet_transaction_payment::weights::SubstrateWeight<Self>;
}

parameter_types! {
	pub const SpendPeriod: BlockNumber = 5 * MINUTES;
	pub const Burn: Permill = Permill::from_percent(0);
	pub const TipCountdown: BlockNumber = 1 * DAYS;
	pub const TipFindersFee: Percent = Percent::from_percent(20);
	pub const TipReportDepositBase: Balance = 1 * UNIQUE;
	pub const DataDepositPerByte: Balance = 1 * CENTIUNIQUE;
	pub const BountyDepositBase: Balance = 1 * UNIQUE;
	pub const BountyDepositPayoutDelay: BlockNumber = 1 * DAYS;
	pub const TreasuryModuleId: PalletId = PalletId(*b"py/trsry");
	pub TreasuryAccount: AccountId = Treasury::account_id();
	pub const BountyUpdatePeriod: BlockNumber = 14 * DAYS;
	pub const MaximumReasonLength: u32 = 16384;
	pub const BountyCuratorDeposit: Permill = Permill::from_percent(50);
	pub const BountyValueMinimum: Balance = 5 * UNIQUE;
	pub const MaxApprovals: u32 = 100;
}

impl pallet_treasury::Config for Runtime {
	type PalletId = TreasuryModuleId;
	type Currency = Balances;
	type RejectOrigin = EnsureRoot<AccountId>;
	type SpendOrigin = NeverEnsureOrigin<u128>;
	type RuntimeEvent = RuntimeEvent;
	type SpendPeriod = SpendPeriod;
	type Burn = Burn;
	type BurnDestination = ();
	type SpendFunds = ();
	type WeightInfo = pallet_treasury::weights::SubstrateWeight<Self>;
	type MaxApprovals = MaxApprovals;
	type AssetKind = ();
	type Beneficiary = AccountId;
	type BeneficiaryLookup = IdentityLookup<Self::Beneficiary>;
	type Paymaster = PayFromAccount<Balances, TreasuryAccount>;
	type BalanceConverter = UnityAssetBalanceConversion;
	type PayoutPeriod = ConstU32<10>;
	type BlockNumberProvider = System;
	#[cfg(feature = "runtime-benchmarks")]
	type BenchmarkHelper = ();
}

impl pallet_sudo::Config for Runtime {
	type RuntimeEvent = RuntimeEvent;
	type RuntimeCall = RuntimeCall;
	type WeightInfo = pallet_sudo::weights::SubstrateWeight<Self>;
}

parameter_types! {
	pub const MaxAuthorities: u32 = 100_000;
}

impl pallet_aura::Config for Runtime {
	type AuthorityId = AuraId;
	type DisabledValidators = ();
	type MaxAuthorities = MaxAuthorities;
	type AllowMultipleBlocksPerSlot = ConstBool<true>;
	type SlotDuration = ConstU64<SLOT_DURATION>;
}

impl pallet_utility::Config for Runtime {
	type RuntimeEvent = RuntimeEvent;
	type RuntimeCall = RuntimeCall;
	type PalletsOrigin = OriginCaller;
	type WeightInfo = pallet_utility::weights::SubstrateWeight<Self>;
}

#[cfg(feature = "runtime-benchmarks")]
pub struct AssetTxHelper;

#[cfg(feature = "runtime-benchmarks")]
impl
	pallet_asset_tx_payment::BenchmarkHelperTrait<
		AccountId,
		staging_xcm::v5::AssetId,
		staging_xcm::v3::MultiLocation,
	> for AssetTxHelper
{
	fn create_asset_id_parameter(
		_id: u32,
	) -> (staging_xcm::v5::AssetId, staging_xcm::v3::MultiLocation) {
		unimplemented!("uses default weights");
	}
	fn setup_balances_and_pool(_asset_id: staging_xcm::v5::AssetId, _account: AccountId) {
		unimplemented!("uses default weights");
	}
}

impl pallet_asset_tx_payment::Config for Runtime {
	type Fungibles = ForeignAssets;
	type OnChargeAssetTransaction = TxFeeFungiblesAdapter;
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = pallet_asset_tx_payment::weights::SubstrateWeight<Runtime>;
	#[cfg(feature = "runtime-benchmarks")]
	type BenchmarkHelper = AssetTxHelper;
}

pub struct TxFeeFungiblesAdapter;

pub(crate) type OnChargeTransactionOf<T> =
	<T as pallet_transaction_payment::Config>::OnChargeTransaction;
pub(crate) type BalanceOf<T> =
	<OnChargeTransactionOf<T> as pallet_transaction_payment::OnChargeTransaction<T>>::Balance;
/// Liquidity info type alias.
pub(crate) type LiquidityInfoOf<T> =
	<OnChargeTransactionOf<T> as pallet_transaction_payment::OnChargeTransaction<T>>::LiquidityInfo;
/// Asset id type alias.
pub(crate) type AssetIdOf<T> =
	<<T as pallet_asset_tx_payment::Config>::Fungibles as fungibles::Inspect<
		<T as frame_system::Config>::AccountId,
	>>::AssetId;
pub(crate) type AssetBalanceOf<T> =
	<<T as pallet_asset_tx_payment::Config>::Fungibles as fungibles::Inspect<
		<T as frame_system::Config>::AccountId,
	>>::Balance;

use frame_support::{
	pallet_prelude::Zero,
	traits::{fungibles::Inspect, tokens::WithdrawConsequence, Defensive},
};
use pallet_configuration::WeightToFee;
use sp_runtime::{
	transaction_validity::{InvalidTransaction, TransactionValidityError},
	Saturating,
};

impl TxFeeFungiblesAdapter {
	fn convert_asset_id(
		asset_id: <Self as OnChargeAssetTransaction<Runtime>>::AssetId,
	) -> Result<staging_xcm::v5::AssetId, InvalidTransaction> {
		let location_v5 = staging_xcm::v4::Location::try_from(asset_id)
			.and_then(staging_xcm::v5::Location::try_from)
			.map_err(|_| InvalidTransaction::Payment)?;
		Ok(staging_xcm::v5::AssetId(location_v5))
	}
}

impl OnChargeAssetTransaction<Runtime> for TxFeeFungiblesAdapter {
	// Note: We stick to `v3::MultiLocation`` because `v4::Location`` doesn't implement `Copy`.
	type AssetId = staging_xcm::v3::MultiLocation;
	type Balance = u128;
	type LiquidityInfo = fungibles::Credit<
		<Runtime as frame_system::Config>::AccountId,
		<Runtime as pallet_asset_tx_payment::Config>::Fungibles,
	>;

	/// Before the transaction is executed the payment of the transaction fees needs to be secured.
	///
	/// Note: The `fee` already includes the `tip`.
	fn withdraw_fee(
		who: &<Runtime as frame_system::Config>::AccountId,
		_call: &<Runtime as frame_system::Config>::RuntimeCall,
		_dispatch_info: &sp_runtime::traits::DispatchInfoOf<
			<Runtime as frame_system::Config>::RuntimeCall,
		>,
		asset_id: Self::AssetId,
		fee: Self::Balance,
		_tip: Self::Balance,
	) -> Result<Self::LiquidityInfo, TransactionValidityError> {
		// We don't know the precision of the underlying asset. Because the converted fee could be
		// less than one (e.g. 0.5) but gets rounded down by integer division we introduce a minimum
		// fee.
		let min_converted_fee: Self::Balance = if fee.is_zero() {
			Zero::zero()
		} else {
			One::one()
		};
		let asset_v5 = Self::convert_asset_id(asset_id)?;
		let converted_fee = ForeignAssets::convert_native_to_asset(&asset_v5, fee)
			.ok_or(InvalidTransaction::Payment)?
			.max(min_converted_fee);
		let can_withdraw =
			<<Runtime as pallet_asset_tx_payment::Config>::Fungibles as fungibles::Inspect<
				<Runtime as frame_system::Config>::AccountId,
			>>::can_withdraw(asset_v5.clone(), who, converted_fee);
		if can_withdraw != WithdrawConsequence::Success {
			return Err(InvalidTransaction::Payment.into());
		}
		<<Runtime as pallet_asset_tx_payment::Config>::Fungibles as fungibles::Balanced<
			<Runtime as frame_system::Config>::AccountId,
		>>::withdraw(
			asset_v5,
			who,
			converted_fee,
			Precision::Exact,
			Preservation::Protect,
			Fortitude::Polite,
		)
		.map_err(|_| TransactionValidityError::from(InvalidTransaction::Payment))
	}

	/// Ensure payment of the transaction fees can be withdrawn.
	///
	/// Note: The `fee` already includes the `tip`.
	fn can_withdraw_fee(
		who: &<Runtime as frame_system::Config>::AccountId,
		_call: &<Runtime as frame_system::Config>::RuntimeCall,
		_dispatch_info: &DispatchInfoOf<<Runtime as frame_system::Config>::RuntimeCall>,
		asset_id: Self::AssetId,
		fee: Self::Balance,
		tip: Self::Balance,
	) -> Result<(), TransactionValidityError> {
		// We don't know the precision of the underlying asset. Because the converted fee could be
		// less than one (e.g. 0.5) but gets rounded down by integer division we introduce a minimum
		// fee.
		let min_converted_fee = if fee.is_zero() {
			Zero::zero()
		} else {
			One::one()
		};
		let asset_v5 = Self::convert_asset_id(asset_id)?;
		let converted_fee = ForeignAssets::convert_native_to_asset(&asset_v5, fee)
			.ok_or(InvalidTransaction::Payment)?
			.max(min_converted_fee);
		let can_withdraw =
			<<Runtime as pallet_asset_tx_payment::Config>::Fungibles as fungibles::Inspect<
				<Runtime as frame_system::Config>::AccountId,
			>>::can_withdraw(asset_v5, who, converted_fee);
		if can_withdraw != WithdrawConsequence::Success {
			return Err(InvalidTransaction::Payment.into());
		}
		Ok(())
	}

	/// After the transaction was executed the actual fee can be calculated.
	/// This function should refund any overpaid fees and optionally deposit
	/// the corrected amount.
	///
	/// Note: The `fee` already includes the `tip`.
	///
	/// Returns the fee and tip in the asset used for payment as (fee, tip).
	fn correct_and_deposit_fee(
		who: &<Runtime as frame_system::Config>::AccountId,
		_dispatch_info: &DispatchInfoOf<<Runtime as frame_system::Config>::RuntimeCall>,
		_post_info: &PostDispatchInfoOf<<Runtime as frame_system::Config>::RuntimeCall>,
		corrected_fee: Self::Balance,
		tip: Self::Balance,
		paid: Self::LiquidityInfo,
	) -> Result<(AssetBalanceOf<Runtime>, AssetBalanceOf<Runtime>), TransactionValidityError> {
		let min_converted_fee = if corrected_fee.is_zero() {
			Zero::zero()
		} else {
			One::one()
		};
		// Convert the corrected fee and tip into the asset used for payment.
		let converted_fee = ForeignAssets::convert_native_to_asset(&paid.asset(), corrected_fee)
			.ok_or(InvalidTransaction::Payment)?
			.max(min_converted_fee);
		let converted_tip = ForeignAssets::convert_native_to_asset(&paid.asset(), tip)
			.ok_or(InvalidTransaction::Payment)?
			.max(min_converted_fee);

		// Calculate how much refund we should return.
		let (final_fee, refund) = paid.split(converted_fee);
		// Refund to the account that paid the fees. If this fails, the account might have dropped
		// below the existential balance. In that case we don't refund anything.
		let _ = <<Runtime as pallet_asset_tx_payment::Config>::Fungibles as fungibles::Balanced<
			<Runtime as frame_system::Config>::AccountId,
		>>::resolve(who, refund);
		// Handle the final fee, e.g. by transferring to the block author or burning.

		// HC::handle_credit(final_fee);
		if let Some(author) = pallet_authorship::Pallet::<Runtime>::author() {
			// In case of error: Will drop the result triggering the `OnDrop` of the imbalance.
			let _ =
				<<Runtime as pallet_asset_tx_payment::Config>::Fungibles as fungibles::Balanced<
					<Runtime as frame_system::Config>::AccountId,
				>>::resolve(&author, final_fee)
				.defensive();
		}
		Ok((converted_fee, converted_tip))
	}
}
