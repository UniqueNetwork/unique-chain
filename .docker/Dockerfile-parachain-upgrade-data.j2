FROM uniquenetwork/builder-polkadot:{{ POLKADOT_BUILD_BRANCH }} as polkadot

# ===== Rust builder =====
FROM uniquenetwork/services:latest as rust-builder

ENV CARGO_HOME="/cargo-home"
ENV PATH="/cargo-home/bin:$PATH"
ENV TZ=UTC

RUN rustup toolchain uninstall $(rustup toolchain list) && \
    rustup toolchain install {{ RUST_TOOLCHAIN }} && \
    rustup default {{ RUST_TOOLCHAIN }} && \
    rustup target list --installed && \
    rustup show
RUN rustup target add wasm32-unknown-unknown --toolchain {{ RUST_TOOLCHAIN }}

RUN mkdir /unique_parachain
WORKDIR /unique_parachain

# ===== BUILD current version ======
FROM rust-builder as builder-unique-current

ARG PROFILE=release

WORKDIR /unique_parachain

RUN git clone https://github.com/UniqueNetwork/unique-chain.git -b {{ MAINNET_BRANCH }} . && \
    ls
#   cargo build --features={{ NETWORK }}-runtime --$PROFILE

# ===== BUILD target version ======
FROM rust-builder as builder-unique-target

ARG PROFILE=release

COPY . /unique_parachain
WORKDIR /unique_parachain

<<<<<<< HEAD
RUN cargo build --features={{ NETWORK }}-runtime{{ EXTRA_FEATURES }} --$PROFILE
=======
#RUN cargo build --features={{ NETWORK }}-runtime --$PROFILE
>>>>>>> 4e7f3eb75 (test DOCKERFILE for zombienet)

# ===== RUN ======
FROM ubuntu:22.04

ENV REPLICA_FROM={{ REPLICA_FROM }}
ENV NEW_PARA_BIN=/unique-chain/target/release/unique-collator
ENV NEW_PARA_WASM=/unique-chain/target/release/wbuild/{{ WASM_NAME }}-runtime/{{ WASM_NAME }}_runtime.compact.compressed.wasm

RUN apt-get -y update && \
    apt-get -y install curl git && \
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash && \
    export NVM_DIR="$HOME/.nvm" && \
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && \
    nvm install v16.16.0 && \
    nvm use v16.16.0

RUN env

#COPY --from=builder-unique-current /unique_parachain/target/release/unique-collator /unique-chain/current/release/
#COPY --from=builder-unique-target /unique_parachain/target/release/unique-collator /unique-chain/target/release/
#COPY --from=builder-unique-target /unique_parachain/target/release/wbuild/{{ WASM_NAME }}-runtime/{{ WASM_NAME }}_runtime.compact.compressed.wasm /unique-chain/target/release/wbuild/{{ WASM_NAME }}-runtime/{{ WASM_NAME }}_runtime.compact.compressed.wasm

RUN ls --recursive /unique-chain/

COPY --from=builder-unique-target /unique_parachain/tests/ /unique-chain/tests/
COPY --from=builder-unique-target /unique_parachain/.docker/forkless-config/zombienet-forkless-data.toml /unique-chain/tests/zombienet-forkless.toml
COPY --from=builder-unique-target /unique_parachain/.docker/forkless-config/fork.jsonnet /unique-chain/tests/fork.jsonnet

RUN ls --recursive /unique-chain/

COPY --from=uniquenetwork/builder-chainql:{{ CHAINQL }} /chainql/target/release/chainql /chainql/target/release/

COPY --from=polkadot /unique_parachain/polkadot/target/release/polkadot /polkadot/target/release/
COPY --from=polkadot /unique_parachain/polkadot/target/release/wbuild/westend-runtime/westend_runtime.compact.compressed.wasm /polkadot/target/release/wbuild/westend-runtime/westend_runtime.compact.compressed.wasm
COPY --from=polkadot /unique_parachain/polkadot/target/release/wbuild/rococo-runtime/rococo_runtime.compact.compressed.wasm /polkadot/target/release/wbuild/rococo-runtime/rococo_runtime.compact.compressed.wasm

CMD export NVM_DIR="$HOME/.nvm" PATH="$PATH:/chainql/target/release" REPLICA_FROM NEW_PARA_BIN NEW_PARA_WASM && \
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && \
    cd /unique-chain/tests && \
    npm install --global yarn && \
    yarn install && \
    yarn frankenstein zombienet-forkless.json
