# ===== Rust builder =====
FROM ubuntu:22.04 as rust-builder
LABEL maintainer="Unique.Network"

ENV CARGO_HOME="/cargo-home"
ENV PATH="/cargo-home/bin:$PATH"
ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN apt-get update && \
    apt-get install -y curl cmake pkg-config libssl-dev git clang llvm libudev-dev protobuf-compiler && \
    apt-get clean && \
    rm -r /var/lib/apt/lists/*

RUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain none

ARG RUST_TOOLCHAIN
RUN echo "Using Rust '$RUST_TOOLCHAIN'" && \
    rustup toolchain install $RUST_TOOLCHAIN && \
    rustup target add wasm32-unknown-unknown --toolchain ${RUST_TOOLCHAIN} && \
    rustup default $RUST_TOOLCHAIN && \
    rustup target list --installed && \
    rustup show

RUN mkdir /unique_parachain
WORKDIR /unique_parachain

# ===== BUILD UNIQUE =====
FROM rust-builder as builder-polkadot-bin

WORKDIR /unique_parachain

COPY . unique-chain/

ARG RUNTIME_FEATURES
# registry for Updating registry. It is safe to cache it, because it only contains references to the dependency files,
#   and the caches for the files themselves are set in Cargo.lock, which won't be updated because of --locked flag
# git for Updating git repository. It is safe to cache it, because git dependencies are cached by revision,
#   revision is locked in Cargo.lock, and it is forbidden to update the Cargo.lock, because of --locked flag
#   passed to cargo build
# target for built dependencies. Technically, it may be unsafe to cache it, but there was no bugs in the caching logic
#   of it to this day (Ignoring incremental compilation, which is explicitly disabled by CARGO_INCREMENTAL=0). Only the
#   fully built crates will be cached depending on the crate source, version and feature set, which are locked by
#   Cargo.lock, which can't be updated because of the --locked flag.
RUN --mount=type=cache,target=/cargo-home/registry \
    --mount=type=cache,target=/cargo-home/git \
    --mount=type=cache,target=/unique_parachain/unique-chain/target \
    cd unique-chain && \
    echo "Using runtime features '$RUNTIME_FEATURES'" && \
    CARGO_INCREMENTAL=0 cargo build --profile integration-tests --features="$RUNTIME_FEATURES" --locked && \
    mv ./target/integration-tests/unique-collator /unique_parachain/unique-chain/ && \
    cd target/integration-tests/wbuild && find . -name "*.wasm" -exec sh -c 'mkdir -p "../../../wasm/$(dirname {})"; cp {} "../../../wasm/{}"' \;

# ===== BIN ======

FROM ubuntu:22.04 as builder-polkadot

COPY --from=builder-polkadot-bin /unique_parachain/unique-chain/unique-collator /bin/unique-collator
COPY --from=builder-polkadot-bin /unique_parachain/unique-chain/wasm /wasm
ENTRYPOINT ["/bin/unique-collator"]
